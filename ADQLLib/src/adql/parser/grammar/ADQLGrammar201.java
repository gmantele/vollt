/* ADQLGrammar201.java */
/* Generated By:JavaCC: Do not edit this line. ADQLGrammar201.java */
package adql.parser.grammar;

/*
 * This file is part of ADQLLibrary.
 * 
 * ADQLLibrary is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ADQLLibrary is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with ADQLLibrary.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Copyright 2020-2023 - UDS/Centre de Donn√©es astronomiques de Strasbourg (CDS)
 */

import java.util.Vector;
import java.util.ArrayList;

import adql.parser.ADQLParser.ADQLVersion;

import adql.parser.IdentifierItems;
import adql.parser.IdentifierItems.IdentifierItem;

import adql.parser.ADQLQueryFactory.JoinType;

import adql.db.DBType.DBDatatype;

import adql.query.*;
import adql.query.from.*;
import adql.query.constraint.*;

import adql.query.operand.*;

import adql.query.operand.function.*;

import adql.query.operand.function.cast.*;

import adql.query.operand.function.conditional.*;

import adql.query.operand.function.string.*;

import adql.query.operand.function.geometry.*;
import adql.query.operand.function.geometry.GeometryFunction.GeometryValue;

/**
 * Parser of ADQL expressions following the ADQL-2.1 grammar.
 *
 * <p><i><b>Note:</b>
 * 	It is strongly recommended to not use this class directly in order to parse
 * 	an ADQL expression. Instead, you should use
 * 	{@link adql.parser.ADQLParser ADQLParser}. It provides a more user-friendly
 * 	interface and provides additional features.
 * </i></p>
 *
 * @see adql.parser.ADQLParser
 *
 * @author Gr&eacute;gory Mantelet (CDS)
 * @version 2.0 (03/2023)
 * @since 2.0
 */

public class ADQLGrammar201 extends ADQLGrammarBase implements ADQLGrammar201Constants {

        /* **********************************************************************
	   *                         GETTERS/SETTERS                            *
	   ********************************************************************** */

        /** Implemented version of the ADQL Standard. */
        public final static ADQLVersion VERSION = ADQLVersion.V2_1;

        public final ADQLVersion getVersion() {
                return VERSION;
        }

        /* **********************************************************************
	   *                         TOKEN KIND TESTS                           *
	   ********************************************************************** */

        public final boolean isEOF(final Token token) {
                return token != null && token.kind == ADQLGrammar201Constants.EOF;
        }

        public final boolean isEOQ(final Token token) {
                return token != null && token.kind == ADQLGrammar201Constants.EOQ;
        }

        public final boolean isRegularIdentifierCandidate(final Token token) {
                return token != null && token.kind == ADQLGrammar201Constants.REGULAR_IDENTIFIER_CANDIDATE;
        }

        public final boolean isSQLReservedWord(final Token token) {
                return token != null && token.kind == ADQLGrammar201Constants.SQL_RESERVED_WORD;
        }

        public final boolean isLeftPar(final Token token) {
                return token != null && token.kind == ADQLGrammar201Constants.LEFT_PAR;
        }

        /* **********************************************************************
	   *                        TOKENIZATION HELPER                         *
	   ********************************************************************** */

        public final Tokenizer getTokenizer(final String expr) throws NullPointerException {
                // Error if no expression to tokenize:
                if (expr == null)
                        throw new NullPointerException("Missing ADQL expression to tokenize!");

                // Return a Tokenizer: instance
                return new Tokenizer() {
                        private final ADQLGrammar201TokenManager tokenManager = new ADQLGrammar201TokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(expr.getBytes())));
                        private boolean eof = false;
                        @Override
                        public Token nextToken() {
                                if (eof)
                                        return null;
                                else {
                                        Token tok = tokenManager.getNextToken();
                                        eof = (tok.kind == ADQLGrammar201Constants.EOF);
                                        return tok;
                                }
                        }
                };
        }

/* ########## */
                                                        /* # SYNTAX # */
                                                        /* ########## */

/* ******************* */
/* GENERAL ADQL SYNTAX */
/* ******************* */
  final public 
ADQLSet Query() throws ParseException {
    trace_call("Query");
    try {
ADQLSet q = null; ClauseADQL<WithItem> with=null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WITH:{
        with = With();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      q = QueryExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
        break;
        }
      case EOQ:{
        jj_consume_token(EOQ);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
// Adjust the query position, if any WITH is provided:
                if (with != null){
                        // remember the position of the query without WITH:
                        TextPosition setPosition = q.getPosition();
                        // set the WITH clause:
                        q.setWith(with);
                        // set the position of the whole query:
                        q.setPosition(new TextPosition(with.getPosition(), setPosition));
                }

                {if ("" != null) return q;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Query");
    }
}

  final public ADQLSet QueryExpression() throws ParseException {
    trace_call("QueryExpression");
    try {
TextPosition endPos = null; ADQLSet set; TextPosition initPos; ClauseADQL<ADQLOrder> orderBy; ClauseOffset offset;
      set = SetExpression();
initPos = set.getPosition(); endPos = set.getPosition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        orderBy = OrderBy();
set.setOrderBy(orderBy); endPos = orderBy.getPosition();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OFFSET:{
        offset = Offset();
set.setOffset(offset);   endPos = offset.getPosition();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
set.setPosition(new TextPosition(initPos, endPos));
                {if ("" != null) return set;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("QueryExpression");
    }
}

  final public ADQLSet SetExpression() throws ParseException {
    trace_call("SetExpression");
    try {
ADQLSet set1=null, set2=null; Token setOp=null, quantifier=null;
      set1 = SetTerm();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNION:
        case EXCEPT:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNION:{
          setOp = jj_consume_token(UNION);
          break;
          }
        case EXCEPT:{
          setOp = jj_consume_token(EXCEPT);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUANTIFIER:{
          quantifier = jj_consume_token(QUANTIFIER);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        set2 = SetTerm();
try {
                        SetOperation set = queryFactory.createSetOperation(VERSION, set1, SetOperationType.valueOf(setOp.image.toUpperCase()), set2);
                        set.setWithDuplicates(quantifier != null && quantifier.image.equalsIgnoreCase("ALL"));
                        set1 = set;
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
      }
{if ("" != null) return set1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SetExpression");
    }
}

  final public ADQLSet SetTerm() throws ParseException {
    trace_call("SetTerm");
    try {
ADQLSet set1=null, set2=null; Token quantifier=null;
      set1 = SetFactor();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTERSECT:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(INTERSECT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUANTIFIER:{
          quantifier = jj_consume_token(QUANTIFIER);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        set2 = SetFactor();
try {
                        SetOperation set = queryFactory.createSetOperation(VERSION, set1, SetOperationType.INTERSECT, set2);
                        set.setWithDuplicates(quantifier != null && quantifier.image.equalsIgnoreCase("ALL"));
                        set1 = set;
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
      }
{if ("" != null) return set1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SetTerm");
    }
}

  final public ADQLSet SetFactor() throws ParseException {
    trace_call("SetFactor");
    try {
ADQLSet set = null; Token start, end;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:{
        set = SimpleQueryExpression();
        break;
        }
      case LEFT_PAR:{
        set = SubQueryExpression();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return set;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SetFactor");
    }
}

  final public ADQLQuery SimpleQueryExpression() throws ParseException {
    trace_call("SimpleQueryExpression");
    try {
TextPosition endPos = null; ClauseSelect select=null; FromContent from; ClauseConstraints where, having; ClauseADQL<ADQLOperand> groupBy;
try{
                        // create the query:
                        query = queryFactory.createQuery(VERSION);
                        stackQuery.push(query);
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
      select = Select();
query.setSelect(select);
      from = From();
query.setFrom(from);       endPos = from.getPosition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        where = Where();
query.setWhere(where);     endPos = where.getPosition();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GROUP:{
        groupBy = GroupBy();
query.setGroupBy(groupBy); endPos = groupBy.getPosition();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HAVING:{
        having = Having();
query.setHaving(having);   endPos = having.getPosition();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
// set the position of the query:
                query.setPosition(new TextPosition(select.getPosition(), endPos));

                // get the previous query (!= null if the current query is a sub-query):
                ADQLQuery previousQuery = stackQuery.pop();
                if (stackQuery.isEmpty())
                        query = null;
                else
                        query = stackQuery.peek();

                {if ("" != null) return previousQuery;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SimpleQueryExpression");
    }
}

  final public ADQLSet SubQueryExpression() throws ParseException {
    trace_call("SubQueryExpression");
    try {
ADQLSet q = null; Token start, end;
      start = jj_consume_token(LEFT_PAR);
      q = QueryExpression();
      end = jj_consume_token(RIGHT_PAR);
q.setPosition(new TextPosition(start, end));
                {if ("" != null) return q;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SubQueryExpression");
    }
}

  final public ClauseADQL<WithItem> With() throws ParseException {
    trace_call("With");
    try {
ClauseADQL<WithItem> withClause = new ClauseADQL<WithItem>("WITH"); WithItem withItem; Token start,end; IdentifierItem id, colId; ADQLSet query;
      try {
        start = jj_consume_token(WITH);
        id = Identifier();
        jj_consume_token(AS);
        jj_consume_token(LEFT_PAR);
        query = QueryExpression();
        end = jj_consume_token(RIGHT_PAR);
withItem = queryFactory.createWithItem(id, query);
                        withItem.setPosition(new TextPosition(id.position, new TextPosition(end)));
                        withClause.add(withItem);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          id = Identifier();
          jj_consume_token(AS);
          jj_consume_token(LEFT_PAR);
          query = QueryExpression();
          end = jj_consume_token(RIGHT_PAR);
withItem = queryFactory.createWithItem(id, query);
                                withItem.setPosition(new TextPosition(id.position, new TextPosition(end)));
                                withClause.add(withItem);
        }
withClause.setPosition(new TextPosition(start, end));
                  {if ("" != null) return withClause;}
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("With");
    }
}

  final public ClauseSelect Select() throws ParseException {
    trace_call("Select");
    try {
ClauseSelect select = new ClauseSelect(); SelectItem item=null; Token start,t = null;
      start = jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUANTIFIER:{
        t = jj_consume_token(QUANTIFIER);
select.setDistinctColumns(t.image.equalsIgnoreCase("DISTINCT"));
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOP:{
        jj_consume_token(TOP);
        t = jj_consume_token(UNSIGNED_INTEGER);
try{
                select.setLimit(Integer.parseInt(t.image));
          }catch(NumberFormatException nfe){
                {if (true) throw new ParseException("[l."+t.beginLine+";c."+t.beginColumn+"] The TOP limit (\""+t.image+"\") isn't a regular unsigned integer !");}
          }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      item = SelectItem();
select.add(item);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        item = SelectItem();
select.add(item);
      }
TextPosition lastItemPos = select.get(select.size()-1).getPosition();
                select.setPosition(new TextPosition(start.beginLine, start.beginColumn, lastItemPos.endLine, lastItemPos.endColumn));
                {if ("" != null) return select;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Select");
    }
}

  final public SelectItem SelectItem() throws ParseException {
    trace_call("SelectItem");
    try {
IdentifierItems identifiers = new IdentifierItems(true); IdentifierItem firstID = null, id = null, label = null; ADQLOperand op = null; SelectItem item; Token starToken;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISK:{
        starToken = jj_consume_token(ASTERISK);
item = new SelectAllColumns(query);
                    item.setPosition(new TextPosition(starToken));
                    {if ("" != null) return item;}
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_1(7)) {
          id = Identifier();
          jj_consume_token(DOT);
identifiers.append(id); firstID = id;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            id = Identifier();
            jj_consume_token(DOT);
identifiers.append(id);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DELIMITED_IDENTIFIER:
            case REGULAR_IDENTIFIER_CANDIDATE:{
              id = Identifier();
              jj_consume_token(DOT);
identifiers.append(id);
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              ;
            }
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          starToken = jj_consume_token(ASTERISK);
try{
                                        ADQLTable table = queryFactory.createTable(identifiers, null);
                                        table.setPosition(new TextPosition(firstID.position, id.position));

                                        item = new SelectAllColumns(table);
                                        item.setPosition(new TextPosition(firstID.position, new TextPosition(starToken)));
                                        {if ("" != null) return item;}
                                }catch(Exception ex) {
                                        {if (true) throw generateParseException(ex);}
                                }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LEFT_PAR:
          case PLUS:
          case MINUS:
          case NULL:
          case AVG:
          case MAX:
          case MIN:
          case SUM:
          case COUNT:
          case BOX:
          case CENTROID:
          case CIRCLE:
          case POINT:
          case POLYGON:
          case REGION:
          case CONTAINS:
          case INTERSECTS:
          case AREA:
          case COORD1:
          case COORD2:
          case COORDSYS:
          case DISTANCE:
          case CAST:
          case LOWER:
          case UPPER:
          case ABS:
          case CEILING:
          case DEGREES:
          case EXP:
          case FLOOR:
          case LOG:
          case LOG10:
          case MOD:
          case PI:
          case POWER:
          case RADIANS:
          case RAND:
          case ROUND:
          case SQRT:
          case TRUNCATE:
          case ACOS:
          case ASIN:
          case ATAN:
          case ATAN2:
          case COS:
          case COT:
          case SIN:
          case TAN:
          case IN_UNIT:
          case COALESCE:
          case STRING_LITERAL:
          case SCIENTIFIC_NUMBER:
          case UNSIGNED_FLOAT:
          case UNSIGNED_INTEGER:
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            op = ValueExpression();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AS:
            case DELIMITED_IDENTIFIER:
            case REGULAR_IDENTIFIER_CANDIDATE:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case AS:{
                jj_consume_token(AS);
                break;
                }
              default:
                jj_la1[19] = jj_gen;
                ;
              }
              label = Identifier();
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              ;
            }
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
try{
                        item = queryFactory.createSelectItem(op, (label==null)?null:label.identifier);
                        if (label != null){
                                item.setCaseSensitive(label.caseSensitivity);
                                item.setPosition(new TextPosition(op.getPosition(), label.position));
                        }else
                                item.setPosition(new TextPosition(op.getPosition()));
                        {if ("" != null) return item;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SelectItem");
    }
}

  final public FromContent From() throws ParseException {
    trace_call("From");
    try {
FromContent content = null, content2 = null;
      try {
        jj_consume_token(FROM);
        content = TableRef();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          content2 = TableRef();
TextPosition startPos = content.getPosition(), endPos = content2.getPosition();
                   content = queryFactory.createJoin(JoinType.CROSS, content, content2);
                   content.setPosition(new TextPosition(startPos, endPos));
        }
{if ("" != null) return content;}
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("From");
    }
}

  final public ClauseConstraints Where() throws ParseException {
    trace_call("Where");
    try {
ClauseConstraints where = new ClauseConstraints("WHERE"); ADQLConstraint condition; Token start;
      start = jj_consume_token(WHERE);
      ConditionsList(where);
TextPosition endPosition = where.getPosition();
          where.setPosition(new TextPosition(start.beginLine, start.beginColumn, endPosition.endLine, endPosition.endColumn));
          {if ("" != null) return where;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Where");
    }
}

  final public ClauseADQL<ADQLOperand> GroupBy() throws ParseException {
    trace_call("GroupBy");
    try {
ClauseADQL<ADQLOperand> groupBy = new ClauseADQL<ADQLOperand>("GROUP BY"); ADQLOperand item = null; Token start;
      start = jj_consume_token(GROUP);
      jj_consume_token(BY);
      item = ValueExpression();
groupBy.add(item);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        item = ValueExpression();
groupBy.add(item);
      }
groupBy.setPosition(new TextPosition(new TextPosition(start), item.getPosition()));
          {if ("" != null) return groupBy;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GroupBy");
    }
}

  final public ClauseConstraints Having() throws ParseException {
    trace_call("Having");
    try {
ClauseConstraints having = new ClauseConstraints("HAVING"); Token start;
      start = jj_consume_token(HAVING);
      ConditionsList(having);
TextPosition endPosition = having.getPosition();
          having.setPosition(new TextPosition(start.beginLine, start.beginColumn, endPosition.endLine, endPosition.endColumn));
          {if ("" != null) return having;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Having");
    }
}

  final public ClauseADQL<ADQLOrder> OrderBy() throws ParseException {
    trace_call("OrderBy");
    try {
ClauseADQL<ADQLOrder> orderBy = new ClauseADQL<ADQLOrder>("ORDER BY"); ADQLOrder order = null; Token start;
      start = jj_consume_token(ORDER);
      jj_consume_token(BY);
      order = OrderItem();
orderBy.add(order);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        order = OrderItem();
orderBy.add(order);
      }
orderBy.setPosition(new TextPosition(start, token));
          {if ("" != null) return orderBy;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OrderBy");
    }
}

  final public ClauseOffset Offset() throws ParseException {
    trace_call("Offset");
    try {
Token start, t;
      start = jj_consume_token(OFFSET);
      t = jj_consume_token(UNSIGNED_INTEGER);
try{
                        ClauseOffset offset = queryFactory.createOffset(Integer.parseInt(t.image));
                        offset.setPosition(new TextPosition(start, t));
                        {if ("" != null) return offset;}
                }catch(NumberFormatException nfe){
                        {if (true) throw new ParseException("The OFFSET limit (\""+t.image+"\") isn't a regular unsigned integer!", new TextPosition(t));}
                }catch(Exception ex) {
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Offset");
    }
}

/* *************************** */
/* COLUMN AND TABLE REFERENCES */
/* *************************** */
  final public IdentifierItem Identifier() throws ParseException {
    trace_call("Identifier");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGULAR_IDENTIFIER_CANDIDATE:{
        t = jj_consume_token(REGULAR_IDENTIFIER_CANDIDATE);
testRegularIdentifier(t);
                        {if ("" != null) return new IdentifierItem(t, false);}
        break;
        }
      case DELIMITED_IDENTIFIER:{
        t = jj_consume_token(DELIMITED_IDENTIFIER);
{if ("" != null) return new IdentifierItem(t, true);}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Identifier");
    }
}

/**
 * Extracts the name of a table with its possible catalog and schema prefixes.
 * 
 * @return A {@link IdentifierItems} which contains at most three items: catalogName, schemaName and tableName.
 */
  final public IdentifierItems TableName() throws ParseException {
    trace_call("TableName");
    try {
IdentifierItems identifiers=new IdentifierItems(true); IdentifierItem id=null;
      id = Identifier();
identifiers.append(id);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        id = Identifier();
identifiers.append(id);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        id = Identifier();
identifiers.append(id);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
{if ("" != null) return identifiers;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TableName");
    }
}

/**
 * Extracts the name of a column with its possible catalog, schema and table prefixes.
 * 
 * @return A {@link IdentifierItems} which contains at most four items: catalogName, schemaName, tableName and columnName.
 */
  final public IdentifierItems ColumnName() throws ParseException {
    trace_call("ColumnName");
    try {
IdentifierItem id; IdentifierItems table=null, identifiers=new IdentifierItems(false);
      id = Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        table = TableName();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
identifiers.append(id);
                if (table != null){
                        for(int i=0; i<table.size(); i++)
                                identifiers.append(table.get(i));
                }
                {if ("" != null) return identifiers;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ColumnName");
    }
}

  final public ADQLColumn Column() throws ParseException {
    trace_call("Column");
    try {
IdentifierItems identifiers;
      identifiers = ColumnName();
try{
                        {if ("" != null) return queryFactory.createColumn(identifiers);}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Column");
    }
}

  final public ADQLOrder OrderItem() throws ParseException {
    trace_call("OrderItem");
    try {
ADQLOperand expr = null; Token ind = null, desc = null;
      expr = ValueExpression();
if (expr instanceof NumericConstant && token.kind == UNSIGNED_INTEGER)
                        ind = token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASC:
      case DESC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASC:{
          jj_consume_token(ASC);
          break;
          }
        case DESC:{
          desc = jj_consume_token(DESC);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
try{
                        ADQLOrder order = null;
                        if (ind != null){
                                order = queryFactory.createOrder(Integer.parseInt(ind.image), desc!=null);
                                order.getColumnReference().setPosition(new TextPosition(ind));
                                if (desc == null)
                                        order.setPosition(new TextPosition(ind));
                                else
                                        order.setPosition(new TextPosition(ind, desc));
                        }else{
                                order = queryFactory.createOrder(expr, desc!=null);
                                if (desc == null)
                                        order.setPosition(expr.getPosition());
                                else
                                        order.setPosition(new TextPosition(expr.getPosition(), new TextPosition(desc)));
                        }
                        {if ("" != null) return order;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OrderItem");
    }
}

  final public FromContent SimpleTableRef() throws ParseException {
    trace_call("SimpleTableRef");
    try {
IdentifierItem alias = null; IdentifierItems identifiers = null; ADQLSet subQuery = null; FromContent content = null; Token start,end;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELIMITED_IDENTIFIER:
        case REGULAR_IDENTIFIER_CANDIDATE:{
          identifiers = TableName();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AS:
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AS:{
              jj_consume_token(AS);
              break;
              }
            default:
              jj_la1[32] = jj_gen;
              ;
            }
            alias = Identifier();
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            ;
          }
content = queryFactory.createTable(identifiers, alias);
                          if (alias == null)
                                content.setPosition(new TextPosition(identifiers.get(0).position, identifiers.get(identifiers.size()-1).position));
                          else
                                content.setPosition(new TextPosition(identifiers.get(0).position, alias.position));
                          {if ("" != null) return content;}
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          if (jj_2_2(2)) {
            subQuery = SubQueryExpression();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AS:{
              jj_consume_token(AS);
              break;
              }
            default:
              jj_la1[34] = jj_gen;
              ;
            }
            alias = Identifier();
content = queryFactory.createTable(subQuery, alias);
                          if (alias == null)
                                content.setPosition(new TextPosition(subQuery.getPosition()));
                          else
                                content.setPosition(new TextPosition(subQuery.getPosition(), alias.position));
                          {if ("" != null) return content;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LEFT_PAR:{
              start = jj_consume_token(LEFT_PAR);
              content = JoinedTable();
              end = jj_consume_token(RIGHT_PAR);
content.setPosition(new TextPosition(start, end));
                          {if ("" != null) return content;}
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SimpleTableRef");
    }
}

  final public FromContent TableRef() throws ParseException {
    trace_call("TableRef");
    try {
FromContent content;
      content = SimpleTableRef();
      label_8:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_8;
        }
        content = JoinSpecification(content);
      }
{if ("" != null) return content;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TableRef");
    }
}

  final public FromContent JoinedTable() throws ParseException {
    trace_call("JoinedTable");
    try {
FromContent content;
      content = SimpleTableRef();
      label_9:
      while (true) {
        content = JoinSpecification(content);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NATURAL:
        case INNER:
        case RIGHT:
        case LEFT:
        case FULL:
        case JOIN:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_9;
        }
      }
{if ("" != null) return content;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("JoinedTable");
    }
}

  final public ADQLJoin JoinSpecification(FromContent leftTable) throws ParseException {
    trace_call("JoinSpecification");
    try {
boolean natural = false; JoinType type = JoinType.INNER;  ClauseConstraints condition = new ClauseConstraints("ON"); ArrayList<ADQLColumn> lstColumns=new ArrayList<ADQLColumn>(); IdentifierItem id; FromContent rightTable; ADQLJoin join; Token lastPar;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NATURAL:{
          jj_consume_token(NATURAL);
natural=true;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INNER:
          case RIGHT:
          case LEFT:
          case FULL:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INNER:{
              jj_consume_token(INNER);
              break;
              }
            case RIGHT:
            case LEFT:
            case FULL:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LEFT:{
                jj_consume_token(LEFT);
type = JoinType.OUTER_LEFT;
                break;
                }
              case RIGHT:{
                jj_consume_token(RIGHT);
type = JoinType.OUTER_RIGHT;
                break;
                }
              case FULL:{
                jj_consume_token(FULL);
type = JoinType.OUTER_FULL;
                break;
                }
              default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case OUTER:{
                jj_consume_token(OUTER);
                break;
                }
              default:
                jj_la1[39] = jj_gen;
                ;
              }
              break;
              }
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          jj_consume_token(JOIN);
          rightTable = SimpleTableRef();
join = queryFactory.createJoin(type, leftTable, rightTable);
                          join.setPosition(new TextPosition(leftTable.getPosition(), rightTable.getPosition()));
                          {if ("" != null) return join;}
          break;
          }
        case INNER:
        case RIGHT:
        case LEFT:
        case FULL:
        case JOIN:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INNER:
          case RIGHT:
          case LEFT:
          case FULL:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INNER:{
              jj_consume_token(INNER);
              break;
              }
            case RIGHT:
            case LEFT:
            case FULL:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LEFT:{
                jj_consume_token(LEFT);
type = JoinType.OUTER_LEFT;
                break;
                }
              case RIGHT:{
                jj_consume_token(RIGHT);
type = JoinType.OUTER_RIGHT;
                break;
                }
              case FULL:{
                jj_consume_token(FULL);
type = JoinType.OUTER_FULL;
                break;
                }
              default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case OUTER:{
                jj_consume_token(OUTER);
                break;
                }
              default:
                jj_la1[43] = jj_gen;
                ;
              }
              break;
              }
            default:
              jj_la1[44] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            ;
          }
          jj_consume_token(JOIN);
          rightTable = SimpleTableRef();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ON:{
            jj_consume_token(ON);
            ConditionsList(condition);
join = queryFactory.createJoin(type, leftTable, rightTable, condition);
                                  join.setPosition(new TextPosition(leftTable.getPosition(), condition.getPosition()));
                                  {if ("" != null) return join;}
            break;
            }
          case USING:{
            jj_consume_token(USING);
            jj_consume_token(LEFT_PAR);
            id = Identifier();
lstColumns.add( queryFactory.createColumn(id) );
            label_10:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                ;
                break;
                }
              default:
                jj_la1[46] = jj_gen;
                break label_10;
              }
              jj_consume_token(COMMA);
              id = Identifier();
lstColumns.add( queryFactory.createColumn(id) );
            }
            lastPar = jj_consume_token(RIGHT_PAR);
join = queryFactory.createJoin(type, leftTable, rightTable, lstColumns);
                                  join.setPosition(new TextPosition(leftTable.getPosition().beginLine, leftTable.getPosition().beginColumn, lastPar.endLine, (lastPar.endColumn < 0) ? -1 : (lastPar.endColumn + 1)));
                                  {if ("" != null) return join;}
            break;
            }
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("JoinSpecification");
    }
}

/* ****** */
/* STRING */
/* ****** */
  final public StringConstant String() throws ParseException {
    trace_call("String");
    try {
Token t, start=null; String str=""; StringConstant cst;
      label_11:
      while (true) {
        t = jj_consume_token(STRING_LITERAL);
str += t.image.substring(1, t.image.length()-1).replaceAll("''", "'");
                if (start == null)
                        start = t;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          break label_11;
        }
      }
try{
                  cst = queryFactory.createStringConstant(str);
                  cst.setPosition(new TextPosition(start, t));
                  {if ("" != null) return cst;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("String");
    }
}

/* ************* */
/* NUMERIC TYPES */
/* ************* */
  final public NumericConstant UnsignedNumeric() throws ParseException {
    trace_call("UnsignedNumeric");
    try {
Token t; NumericConstant cst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SCIENTIFIC_NUMBER:{
        t = jj_consume_token(SCIENTIFIC_NUMBER);
        break;
        }
      case UNSIGNED_FLOAT:{
        t = jj_consume_token(UNSIGNED_FLOAT);
        break;
        }
      case UNSIGNED_INTEGER:{
        t = jj_consume_token(UNSIGNED_INTEGER);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
try{
                        cst = queryFactory.createNumericConstant(t.image);
                        cst.setPosition(new TextPosition(t));
                        {if ("" != null) return cst;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("UnsignedNumeric");
    }
}

  final public NumericConstant UnsignedFloat() throws ParseException {
    trace_call("UnsignedFloat");
    try {
Token t; NumericConstant cst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNSIGNED_INTEGER:{
        t = jj_consume_token(UNSIGNED_INTEGER);
        break;
        }
      case UNSIGNED_FLOAT:{
        t = jj_consume_token(UNSIGNED_FLOAT);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
try{
                        cst = queryFactory.createNumericConstant(t.image);
                        cst.setPosition(new TextPosition(t));
                        {if ("" != null) return cst;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("UnsignedFloat");
    }
}

  final public NumericConstant SignedInteger() throws ParseException {
    trace_call("SignedInteger");
    try {
Token sign=null, number; NumericConstant cst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          sign = jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          sign = jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      number = jj_consume_token(UNSIGNED_INTEGER);
try{
                        if (sign == null){                              cst = queryFactory.createNumericConstant(number.image);
                                cst.setPosition(new TextPosition(number));
                        }else{                          cst = queryFactory.createNumericConstant(sign.image+number.image);
                                cst.setPosition(new TextPosition(sign, number));
                        }
                        {if ("" != null) return cst;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SignedInteger");
    }
}

/* *********** */
/* EXPRESSIONS */
/* *********** */
  final public ADQLOperand NumericValueExpressionPrimary() throws ParseException {
    trace_call("NumericValueExpressionPrimary");
    try {
ADQLColumn column; ADQLOperand op; Token left, right;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NULL:{
          // NULL
                          left = jj_consume_token(NULL);
op = queryFactory.createNullValue(); ((NullValue)op).setPosition(new TextPosition(left)); {if ("" != null) return op;}
          break;
          }
        case SCIENTIFIC_NUMBER:
        case UNSIGNED_FLOAT:
        case UNSIGNED_INTEGER:{
          op = UnsignedNumeric();
{if ("" != null) return op;}
          break;
          }
        case DELIMITED_IDENTIFIER:
        case REGULAR_IDENTIFIER_CANDIDATE:{
          column = Column();
column.setExpectedType('N'); {if ("" != null) return column;}
          break;
          }
        case AVG:
        case MAX:
        case MIN:
        case SUM:
        case COUNT:{
          op = SqlFunction();
{if ("" != null) return op;}
          break;
          }
        case LEFT_PAR:{
          left = jj_consume_token(LEFT_PAR);
          op = NumericExpression();
          right = jj_consume_token(RIGHT_PAR);
WrappedOperand wop = queryFactory.createWrappedOperand(op); wop.setPosition(new TextPosition(left, right)); {if ("" != null) return wop;}
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NumericValueExpressionPrimary");
    }
}

  final public ADQLOperand StringValueExpressionPrimary() throws ParseException {
    trace_call("StringValueExpressionPrimary");
    try {
StringConstant expr; ADQLColumn column; ADQLOperand op; Token left, right;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NULL:{
          // NULL
                          left = jj_consume_token(NULL);
op = queryFactory.createNullValue(); ((NullValue)op).setPosition(new TextPosition(left)); {if ("" != null) return op;}
          break;
          }
        case STRING_LITERAL:{
          expr = String();
{if ("" != null) return expr;}
          break;
          }
        case SCIENTIFIC_NUMBER:
        case UNSIGNED_FLOAT:
        case UNSIGNED_INTEGER:{
          op = UnsignedNumeric();
{if ("" != null) return op;}
          break;
          }
        case AVG:
        case MAX:
        case MIN:
        case SUM:
        case COUNT:{
          op = SqlFunction();
{if ("" != null) return op;}
          break;
          }
        case DELIMITED_IDENTIFIER:
        case REGULAR_IDENTIFIER_CANDIDATE:{
          column = Column();
column.setExpectedType('*'); {if ("" != null) return column;}
          break;
          }
        case LEFT_PAR:{
          left = jj_consume_token(LEFT_PAR);
          op = ValueExpression();
          right = jj_consume_token(RIGHT_PAR);
WrappedOperand wop = queryFactory.createWrappedOperand(op); wop.setPosition(new TextPosition(left, right)); {if ("" != null) return wop;}
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StringValueExpressionPrimary");
    }
}

  final public ADQLOperand ValueExpression() throws ParseException {
    trace_call("ValueExpression");
    try {
ADQLOperand valueExpr = null; Token left, right;
      try {
        if (jj_2_4(2147483647)) {
          valueExpr = NumericExpression();
        } else if (jj_2_5(2147483647)) {
          valueExpr = StringExpression();
        } else if (jj_2_6(2147483647)) {
          left = jj_consume_token(LEFT_PAR);
          valueExpr = ValueExpression();
          right = jj_consume_token(RIGHT_PAR);
valueExpr = queryFactory.createWrappedOperand(valueExpr); ((WrappedOperand)valueExpr).setPosition(new TextPosition(left, right));
        } else if (jj_2_7(2147483647)) {
          valueExpr = UserDefinedFunction();
        } else if (jj_2_8(2147483647)) {
          valueExpr = CastFunction('?');
        } else if (jj_2_9(2147483647)) {
          valueExpr = ConditionalFunction();
        } else if (jj_2_10(2)) {
          valueExpr = GeometryValueFunction();
        } else if (jj_2_11(2147483647)) {
          valueExpr = Column();
        } else if (jj_2_12(2147483647)) {
          valueExpr = StringFactor();
        } else if (jj_2_13(3)) {
          valueExpr = Factor();
        } else if (jj_2_14(2)) {
          valueExpr = NumericFunction();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            valueExpr = Column();
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
{if ("" != null) return valueExpr;}
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ValueExpression");
    }
}

  final public ADQLOperand NumericExpression() throws ParseException {
    trace_call("NumericExpression");
    try {
Token sign=null; ADQLOperand leftOp, rightOp=null;
      leftOp = NumericTerm();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          sign = jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          sign = jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rightOp = NumericExpression();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        ;
      }
if (sign == null)
                {if ("" != null) return leftOp;}
        else{
                try{
                        Operation operation = queryFactory.createOperation(leftOp, OperationType.getOperator(sign.image), rightOp);
                        operation.setPosition(new TextPosition(leftOp.getPosition(), rightOp.getPosition()));
                        {if ("" != null) return operation;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
        }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NumericExpression");
    }
}

  final public ADQLOperand NumericTerm() throws ParseException {
    trace_call("NumericTerm");
    try {
Token sign=null; ADQLOperand leftOp, rightOp=null;
      leftOp = Factor();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISK:
      case DIVIDE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASTERISK:{
          sign = jj_consume_token(ASTERISK);
          break;
          }
        case DIVIDE:{
          sign = jj_consume_token(DIVIDE);
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rightOp = NumericTerm();
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
if (sign == null)
                {if ("" != null) return leftOp;}
        else{
                try{
                        Operation operation = queryFactory.createOperation(leftOp, OperationType.getOperator(sign.image), rightOp);
                        operation.setPosition(new TextPosition(leftOp.getPosition(), rightOp.getPosition()));
                        {if ("" != null) return operation;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
        }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NumericTerm");
    }
}

  final public ADQLOperand Factor() throws ParseException {
    trace_call("Factor");
    try {
Token minusSign = null, bitNot = null; ADQLOperand op;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          minusSign = jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      if (jj_2_15(2)) {
        op = NumericFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_PAR:
        case NULL:
        case AVG:
        case MAX:
        case MIN:
        case SUM:
        case COUNT:
        case SCIENTIFIC_NUMBER:
        case UNSIGNED_FLOAT:
        case UNSIGNED_INTEGER:
        case DELIMITED_IDENTIFIER:
        case REGULAR_IDENTIFIER_CANDIDATE:{
          op = NumericValueExpressionPrimary();
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
try {
                        if (minusSign != null) {
                                NegativeOperand negativeOp = queryFactory.createNegativeOperand(op);
                                negativeOp.setPosition(new TextPosition(new TextPosition(minusSign), op.getPosition()));
                                {if ("" != null) return negativeOp;}
                        } else
                                {if ("" != null) return op;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Factor");
    }
}

  final public ADQLOperand StringExpression() throws ParseException {
    trace_call("StringExpression");
    try {
ADQLOperand leftOp; ADQLOperand rightOp = null;
      leftOp = StringFactor();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONCAT:{
          ;
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          break label_12;
        }
        jj_consume_token(CONCAT);
        rightOp = StringFactor();
if (!(leftOp instanceof Concatenation)){
                                try{
                                        ADQLOperand temp = leftOp;
                                        leftOp = queryFactory.createConcatenation();
                                        ((Concatenation)leftOp).add(temp);
                                }catch(Exception ex){
                                        {if (true) throw generateParseException(ex);}
                                }
                        }
                        ((Concatenation)leftOp).add(rightOp);
      }
if (leftOp instanceof Concatenation){
                        Concatenation concat = (Concatenation)leftOp;
                        concat.setPosition(new TextPosition(concat.get(0).getPosition(), concat.get(concat.size()-1).getPosition()));
                }else if (leftOp instanceof ADQLColumn){
                        ((ADQLColumn)leftOp).setExpectedType('S');
                }
          {if ("" != null) return leftOp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StringExpression");
    }
}

  final public ADQLOperand StringFactor() throws ParseException {
    trace_call("StringFactor");
    try {
ADQLOperand op;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COORDSYS:{
        op = ExtractCoordSys();
        break;
        }
      case LOWER:{
        op = LowerFunction();
        break;
        }
      case UPPER:{
        op = UpperFunction();
        break;
        }
      case CAST:{
        op = StringCastFunction();
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        if (jj_2_16(2)) {
          op = UserDefinedFunction();
((UserDefinedFunction)op).setExpectedType('S');
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LEFT_PAR:
          case NULL:
          case AVG:
          case MAX:
          case MIN:
          case SUM:
          case COUNT:
          case STRING_LITERAL:
          case SCIENTIFIC_NUMBER:
          case UNSIGNED_FLOAT:
          case UNSIGNED_INTEGER:
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            op = StringValueExpressionPrimary();
            break;
            }
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
{if ("" != null) return op;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StringFactor");
    }
}

  final public GeometryValue<GeometryFunction> GeometryExpression() throws ParseException {
    trace_call("GeometryExpression");
    try {
ADQLColumn col = null; UserDefinedFunction udf = null; CastFunction cf = null; GeometryFunction gf = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOX:
      case CENTROID:
      case CIRCLE:
      case POINT:
      case POLYGON:
      case REGION:{
        gf = GeometryValueFunction();
        break;
        }
      case CAST:{
        cf = GeometricCastFunction();
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        if (jj_2_17(2)) {
          udf = UserDefinedFunction();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            col = Column();
            break;
            }
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
if (col != null){
                        col.setExpectedType('G');
                        {if ("" != null) return new GeometryValue<GeometryFunction>(col);}
                }else if (udf != null){
                        udf.setExpectedType('G');
                        {if ("" != null) return new GeometryValue<GeometryFunction>(udf);}
                }else if (cf != null) {
                        udf.setExpectedType('G');
                        {if ("" != null) return new GeometryValue<GeometryFunction>(cf);}
                }else
                        {if ("" != null) return new GeometryValue<GeometryFunction>(gf);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GeometryExpression");
    }
}

/* ********************************** */
/* BOOLEAN EXPRESSIONS (WHERE clause) */
/* ********************************** */
  final public ClauseConstraints ConditionsList(ClauseConstraints clause) throws ParseException {
    trace_call("ConditionsList");
    try {
ADQLConstraint constraint = null; Token op = null; boolean notOp = false;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          op = jj_consume_token(NOT);
notOp = true;
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          ;
        }
        constraint = Constraint();
if (notOp){
                                TextPosition oldPos = constraint.getPosition();
                                constraint = queryFactory.createNot(constraint);
                                ((NotConstraint)constraint).setPosition(new TextPosition(op.beginLine, op.beginColumn, oldPos.endLine, oldPos.endColumn));
                        }
                        notOp = false;

                        if (clause instanceof ADQLConstraint)
                                clause.add(constraint);
                        else
                                clause.add(constraint);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:
          case OR:{
            ;
            break;
            }
          default:
            jj_la1[70] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:{
            op = jj_consume_token(AND);
            break;
            }
          case OR:{
            op = jj_consume_token(OR);
            break;
            }
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NOT:{
            jj_consume_token(NOT);
notOp = true;
            break;
            }
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          constraint = Constraint();
if (notOp){
                                        TextPosition oldPos = constraint.getPosition();
                                        constraint = queryFactory.createNot(constraint);
                                        ((NotConstraint)constraint).setPosition(new TextPosition(op.beginLine, op.beginColumn, oldPos.endLine, oldPos.endColumn));
                                }
                                notOp = false;

                                if (clause instanceof ADQLConstraint)
                                        clause.add(op.image, constraint);
                                else
                                        clause.add(op.image, constraint);
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
if (!clause.isEmpty()){
                        TextPosition start = clause.get(0).getPosition();
                        TextPosition end = clause.get(clause.size()-1).getPosition();
                        clause.setPosition(new TextPosition(start, end));
                }
                {if ("" != null) return clause;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ConditionsList");
    }
}

  final public ADQLConstraint Constraint() throws ParseException {
    trace_call("Constraint");
    try {
ADQLConstraint constraint =  null; Token start, end;
      if (jj_2_18(2147483647)) {
        start = jj_consume_token(LEFT_PAR);
try{
                                constraint = queryFactory.createGroupOfConstraints();
                        }catch(Exception ex){
                                {if (true) throw generateParseException(ex);}
                        }
        ConditionsList((ConstraintsGroup)constraint);
        end = jj_consume_token(RIGHT_PAR);
((ConstraintsGroup)constraint).setPosition(new TextPosition(start, end));
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_PAR:
        case PLUS:
        case MINUS:
        case NULL:
        case EXISTS:
        case AVG:
        case MAX:
        case MIN:
        case SUM:
        case COUNT:
        case BOX:
        case CENTROID:
        case CIRCLE:
        case POINT:
        case POLYGON:
        case REGION:
        case CONTAINS:
        case INTERSECTS:
        case AREA:
        case COORD1:
        case COORD2:
        case COORDSYS:
        case DISTANCE:
        case CAST:
        case LOWER:
        case UPPER:
        case ABS:
        case CEILING:
        case DEGREES:
        case EXP:
        case FLOOR:
        case LOG:
        case LOG10:
        case MOD:
        case PI:
        case POWER:
        case RADIANS:
        case RAND:
        case ROUND:
        case SQRT:
        case TRUNCATE:
        case ACOS:
        case ASIN:
        case ATAN:
        case ATAN2:
        case COS:
        case COT:
        case SIN:
        case TAN:
        case IN_UNIT:
        case COALESCE:
        case STRING_LITERAL:
        case SCIENTIFIC_NUMBER:
        case UNSIGNED_FLOAT:
        case UNSIGNED_INTEGER:
        case DELIMITED_IDENTIFIER:
        case REGULAR_IDENTIFIER_CANDIDATE:{
          constraint = Predicate();
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return constraint;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Constraint");
    }
}

  final public ADQLConstraint Predicate() throws ParseException {
    trace_call("Predicate");
    try {
ADQLSet q=null; ADQLColumn column=null; ADQLOperand strExpr1=null, strExpr2=null; ADQLOperand op; Token start, notToken = null, end; ADQLConstraint constraint = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXISTS:{
          start = jj_consume_token(EXISTS);
          q = SubQueryExpression();
Exists e = queryFactory.createExists(q);
                          e.setPosition(new TextPosition(start.beginLine, start.beginColumn, q.getPosition().endLine, q.getPosition().endColumn));
                          {if ("" != null) return e;}
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          if (jj_2_20(2147483647)) {
            column = Column();
            jj_consume_token(IS);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NOT:{
              notToken = jj_consume_token(NOT);
              break;
              }
            default:
              jj_la1[74] = jj_gen;
              ;
            }
            end = jj_consume_token(NULL);
IsNull in = queryFactory.createIsNull((notToken!=null), column);
                      in.setPosition(new TextPosition(column.getPosition().beginLine, column.getPosition().beginColumn, end.endLine, (end.endColumn < 0) ? -1 : (end.endColumn + 1)));
                      {if ("" != null) return in;}
          } else if (jj_2_21(2147483647)) {
            strExpr1 = StringExpression();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NOT:{
              notToken = jj_consume_token(NOT);
              break;
              }
            default:
              jj_la1[75] = jj_gen;
              ;
            }
            jj_consume_token(LIKE);
            strExpr2 = StringExpression();
Comparison comp = queryFactory.createComparison(strExpr1, (notToken==null)?ComparisonOperator.LIKE:ComparisonOperator.NOTLIKE, strExpr2);
                      comp.setPosition(new TextPosition(strExpr1.getPosition(), strExpr2.getPosition()));
                      {if ("" != null) return comp;}
          } else if (jj_2_22(2147483647)) {
            strExpr1 = StringExpression();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NOT:{
              notToken = jj_consume_token(NOT);
              break;
              }
            default:
              jj_la1[76] = jj_gen;
              ;
            }
            jj_consume_token(ILIKE);
            strExpr2 = StringExpression();
Comparison comp = queryFactory.createComparison(strExpr1, (notToken==null)?ComparisonOperator.ILIKE:ComparisonOperator.NOTILIKE, strExpr2);
                      comp.setPosition(new TextPosition(strExpr1.getPosition(), strExpr2.getPosition()));
                      {if ("" != null) return comp;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LEFT_PAR:
            case PLUS:
            case MINUS:
            case NULL:
            case AVG:
            case MAX:
            case MIN:
            case SUM:
            case COUNT:
            case BOX:
            case CENTROID:
            case CIRCLE:
            case POINT:
            case POLYGON:
            case REGION:
            case CONTAINS:
            case INTERSECTS:
            case AREA:
            case COORD1:
            case COORD2:
            case COORDSYS:
            case DISTANCE:
            case CAST:
            case LOWER:
            case UPPER:
            case ABS:
            case CEILING:
            case DEGREES:
            case EXP:
            case FLOOR:
            case LOG:
            case LOG10:
            case MOD:
            case PI:
            case POWER:
            case RADIANS:
            case RAND:
            case ROUND:
            case SQRT:
            case TRUNCATE:
            case ACOS:
            case ASIN:
            case ATAN:
            case ATAN2:
            case COS:
            case COT:
            case SIN:
            case TAN:
            case IN_UNIT:
            case COALESCE:
            case STRING_LITERAL:
            case SCIENTIFIC_NUMBER:
            case UNSIGNED_FLOAT:
            case UNSIGNED_INTEGER:
            case DELIMITED_IDENTIFIER:
            case REGULAR_IDENTIFIER_CANDIDATE:{
              op = ValueExpression();
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EQUAL:
              case NOT_EQUAL:
              case LESS_THAN:
              case LESS_EQUAL_THAN:
              case GREATER_THAN:
              case GREATER_EQUAL_THAN:{
                constraint = ComparisonEnd(op);
                break;
                }
              default:
                jj_la1[77] = jj_gen;
                if (jj_2_19(2)) {
                  constraint = BetweenEnd(op);
                } else {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case NOT:
                  case IN:{
                    constraint = InEnd(op);
                    break;
                    }
                  default:
                    jj_la1[78] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
              break;
              }
            default:
              jj_la1[80] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
{if ("" != null) return constraint;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Predicate");
    }
}

  final public Comparison ComparisonEnd(ADQLOperand leftOp) throws ParseException {
    trace_call("ComparisonEnd");
    try {
Token comp; ADQLOperand rightOp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        comp = jj_consume_token(EQUAL);
        break;
        }
      case NOT_EQUAL:{
        comp = jj_consume_token(NOT_EQUAL);
        break;
        }
      case LESS_THAN:{
        comp = jj_consume_token(LESS_THAN);
        break;
        }
      case LESS_EQUAL_THAN:{
        comp = jj_consume_token(LESS_EQUAL_THAN);
        break;
        }
      case GREATER_THAN:{
        comp = jj_consume_token(GREATER_THAN);
        break;
        }
      case GREATER_EQUAL_THAN:{
        comp = jj_consume_token(GREATER_EQUAL_THAN);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightOp = ValueExpression();
try{
                        Comparison comparison = queryFactory.createComparison(leftOp, ComparisonOperator.getOperator(comp.image), rightOp);
                        comparison.setPosition(new TextPosition(leftOp.getPosition(), rightOp.getPosition()));
                        {if ("" != null) return comparison;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ComparisonEnd");
    }
}

  final public Between BetweenEnd(ADQLOperand leftOp) throws ParseException {
    trace_call("BetweenEnd");
    try {
Token start,notToken=null; ADQLOperand min, max;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        notToken = jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      start = jj_consume_token(BETWEEN);
      min = ValueExpression();
      jj_consume_token(AND);
      max = ValueExpression();
try{
                        Between bet = queryFactory.createBetween((notToken!=null), leftOp, min, max);
                        if (notToken != null) start = notToken;
                        bet.setPosition(new TextPosition(start.beginLine, start.beginColumn, max.getPosition().endLine, max.getPosition().endColumn));
                        {if ("" != null) return bet;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BetweenEnd");
    }
}

  final public In InEnd(ADQLOperand leftOp) throws ParseException {
    trace_call("InEnd");
    try {
Token not=null, start; ADQLSet q = null; ADQLOperand item; Vector<ADQLOperand> items = new Vector<ADQLOperand>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        not = jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      start = jj_consume_token(IN);
      if (jj_2_23(2)) {
        q = SubQueryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_PAR:{
          jj_consume_token(LEFT_PAR);
          item = ValueExpression();
items.add(item);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[84] = jj_gen;
              break label_14;
            }
            jj_consume_token(COMMA);
            item = ValueExpression();
items.add(item);
          }
          jj_consume_token(RIGHT_PAR);
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
try{
                        In in;
                        start = (not!=null) ? not : start;
                        if (q != null){
                                in = queryFactory.createIn(leftOp, q, not!=null);
                                in.setPosition(new TextPosition(start.beginLine, start.beginColumn, q.getPosition().endLine, q.getPosition().endColumn));
                        }else{
                                ADQLOperand[] list = new ADQLOperand[items.size()];
                                int i=0;
                                for(ADQLOperand op : items)
                                        list[i++] = op;
                                in = queryFactory.createIn(leftOp, list, not!=null);
                                in.setPosition(new TextPosition(start.beginLine, start.beginColumn, list[list.length-1].getPosition().endLine, list[list.length-1].getPosition().endColumn));
                        }
                        {if ("" != null) return in;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InEnd");
    }
}

/* ************* */
/* SQL FUNCTIONS */
/* ************* */
  final public SQLFunction SqlFunction() throws ParseException {
    trace_call("SqlFunction");
    try {
Token fct, all=null, distinct=null, end; ADQLOperand op=null; SQLFunction funct = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COUNT:{
          fct = jj_consume_token(COUNT);
          jj_consume_token(LEFT_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case QUANTIFIER:{
            distinct = jj_consume_token(QUANTIFIER);
            break;
            }
          default:
            jj_la1[86] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASTERISK:{
            all = jj_consume_token(ASTERISK);
            break;
            }
          case LEFT_PAR:
          case PLUS:
          case MINUS:
          case NULL:
          case AVG:
          case MAX:
          case MIN:
          case SUM:
          case COUNT:
          case BOX:
          case CENTROID:
          case CIRCLE:
          case POINT:
          case POLYGON:
          case REGION:
          case CONTAINS:
          case INTERSECTS:
          case AREA:
          case COORD1:
          case COORD2:
          case COORDSYS:
          case DISTANCE:
          case CAST:
          case LOWER:
          case UPPER:
          case ABS:
          case CEILING:
          case DEGREES:
          case EXP:
          case FLOOR:
          case LOG:
          case LOG10:
          case MOD:
          case PI:
          case POWER:
          case RADIANS:
          case RAND:
          case ROUND:
          case SQRT:
          case TRUNCATE:
          case ACOS:
          case ASIN:
          case ATAN:
          case ATAN2:
          case COS:
          case COT:
          case SIN:
          case TAN:
          case IN_UNIT:
          case COALESCE:
          case STRING_LITERAL:
          case SCIENTIFIC_NUMBER:
          case UNSIGNED_FLOAT:
          case UNSIGNED_INTEGER:
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            op = ValueExpression();
            break;
            }
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          end = jj_consume_token(RIGHT_PAR);
funct = queryFactory.createSQLFunction((all!=null)?SQLFunctionType.COUNT_ALL:SQLFunctionType.COUNT, op, distinct != null && distinct.image.equalsIgnoreCase("distinct"));
                          funct.setPosition(new TextPosition(fct, end));
          break;
          }
        case AVG:
        case MAX:
        case MIN:
        case SUM:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AVG:{
            fct = jj_consume_token(AVG);
            break;
            }
          case MAX:{
            fct = jj_consume_token(MAX);
            break;
            }
          case MIN:{
            fct = jj_consume_token(MIN);
            break;
            }
          case SUM:{
            fct = jj_consume_token(SUM);
            break;
            }
          default:
            jj_la1[88] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(LEFT_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case QUANTIFIER:{
            distinct = jj_consume_token(QUANTIFIER);
            break;
            }
          default:
            jj_la1[89] = jj_gen;
            ;
          }
          op = ValueExpression();
          end = jj_consume_token(RIGHT_PAR);
funct = queryFactory.createSQLFunction(SQLFunctionType.valueOf(fct.image.toUpperCase()), op, distinct != null && distinct.image.equalsIgnoreCase("distinct"));
                          funct.setPosition(new TextPosition(fct, end));
          break;
          }
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
{if ("" != null) return funct;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SqlFunction");
    }
}

/* ************** */
/* ADQL FUNCTIONS */
/* ************** */
  final public ADQLOperand[] Coordinates() throws ParseException {
    trace_call("Coordinates");
    try {
ADQLOperand op1, op2;
      op1 = NumericExpression();
      jj_consume_token(COMMA);
      op2 = NumericExpression();
{if ("" != null) return new ADQLOperand[]{op1,op2};}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Coordinates");
    }
}

  final public GeometryFunction GeometryFunction() throws ParseException {
    trace_call("GeometryFunction");
    try {
Token fct=null, end=null; GeometryValue<GeometryFunction> gvf1, gvf2; GeometryValue<PointFunction> gvp1, gvp2; GeometryFunction gf = null; PointFunction p1=null, p2=null; ADQLColumn col1 = null, col2 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONTAINS:
        case INTERSECTS:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONTAINS:{
            fct = jj_consume_token(CONTAINS);
            break;
            }
          case INTERSECTS:{
            fct = jj_consume_token(INTERSECTS);
            break;
            }
          default:
            jj_la1[91] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(LEFT_PAR);
          gvf1 = GeometryExpression();
          jj_consume_token(COMMA);
          gvf2 = GeometryExpression();
          end = jj_consume_token(RIGHT_PAR);
if (fct.image.equalsIgnoreCase("contains"))
                                        gf = queryFactory.createContains(gvf1, gvf2);
                                else
                                        gf = queryFactory.createIntersects(gvf1, gvf2);
          break;
          }
        case AREA:{
          fct = jj_consume_token(AREA);
          jj_consume_token(LEFT_PAR);
          gvf1 = GeometryExpression();
          end = jj_consume_token(RIGHT_PAR);
gf = queryFactory.createArea(gvf1);
          break;
          }
        case COORD1:{
          fct = jj_consume_token(COORD1);
          jj_consume_token(LEFT_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case POINT:{
            p1 = Point();
gf = queryFactory.createCoord1(p1);
            break;
            }
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            col1 = Column();
col1.setExpectedType('G'); gf = queryFactory.createCoord1(col1);
            break;
            }
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case COORD2:{
          fct = jj_consume_token(COORD2);
          jj_consume_token(LEFT_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case POINT:{
            p1 = Point();
gf = queryFactory.createCoord2(p1);
            break;
            }
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            col1 = Column();
col1.setExpectedType('G'); gf = queryFactory.createCoord2(col1);
            break;
            }
          default:
            jj_la1[93] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case DISTANCE:{
          gf = DistanceFunction();
          break;
          }
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
if (fct != null)
                gf.setPosition(new TextPosition(fct, end));
          {if ("" != null) return gf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GeometryFunction");
    }
}

  final public DistanceFunction DistanceFunction() throws ParseException {
    trace_call("DistanceFunction");
    try {
Token fct=null, end=null; DistanceFunction gf; ADQLOperand lon, lat; GeometryValue<GeometryFunction> gvp1, gvp2;
      try {
        if (jj_2_24(2147483647)) {
          gf = DistanceFunction2();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DISTANCE:{
            // DISTANCE(lon1, lat1, lon2, lat2)
                                    fct = jj_consume_token(DISTANCE);
            jj_consume_token(LEFT_PAR);
            lon = NumericExpression();
            jj_consume_token(COMMA);
            lat = NumericExpression();
gvp1 = new GeometryValue<GeometryFunction>(queryFactory.createPoint(null, lon, lat));
            jj_consume_token(COMMA);
            lon = NumericExpression();
            jj_consume_token(COMMA);
            lat = NumericExpression();
gvp2 = new GeometryValue<GeometryFunction>(queryFactory.createPoint(null, lon, lat));
            end = jj_consume_token(RIGHT_PAR);
gf = queryFactory.createDistance(gvp1, gvp2);
                                gf.setPosition(new TextPosition(fct, end));
            break;
            }
          default:
            jj_la1[95] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
{if ("" != null) return gf;}
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DistanceFunction");
    }
}

  final public GeometryValue<GeometryFunction> PointValue() throws ParseException {
    trace_call("PointValue");
    try {
GeometryFunction p=null; ADQLColumn col=null; UserDefinedFunction udf=null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POINT:{
        p = Point();
        break;
        }
      case CENTROID:{
        p = Centroid();
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        if (jj_2_25(2)) {
          udf = UserDefinedFunction();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            col = Column();
            break;
            }
          default:
            jj_la1[97] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
if (p != null)
                        {if ("" != null) return new GeometryValue<GeometryFunction>(p);}
                else if (udf != null){
                        udf.setExpectedType('G');
                        {if ("" != null) return new GeometryValue<GeometryFunction>(udf);}
                }else{
                        col.setExpectedType('G');
                        {if ("" != null) return new GeometryValue<GeometryFunction>(col);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PointValue");
    }
}

  final public DistanceFunction DistanceFunction2() throws ParseException {
    trace_call("DistanceFunction2");
    try {
Token fct=null, end=null; DistanceFunction gf; GeometryValue<GeometryFunction> gvp1, gvp2; GeometryFunction p1=null, p2=null; ADQLColumn col1=null, col2=null; UserDefinedFunction udf1=null, udf2=null;
      try {
        fct = jj_consume_token(DISTANCE);
        jj_consume_token(LEFT_PAR);
        gvp1 = PointValue();
        jj_consume_token(COMMA);
        gvp2 = PointValue();
        end = jj_consume_token(RIGHT_PAR);
gf = queryFactory.createDistance(gvp1, gvp2);
                        gf.setPosition(new TextPosition(fct, end));
{if ("" != null) return gf;}
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DistanceFunction2");
    }
}

  final public ADQLOperand CoordinateSystem() throws ParseException {
    trace_call("CoordinateSystem");
    try {
ADQLOperand coordSys=null; Token tok;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL:{
        tok = jj_consume_token(NULL);
coordSys=queryFactory.createNullValue(); ((NullValue)coordSys).setPosition(new TextPosition(tok));
        break;
        }
      case STRING_LITERAL:{
        coordSys = String();
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return coordSys;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CoordinateSystem");
    }
}

  final public GeometryFunction GeometryValueFunction() throws ParseException {
    trace_call("GeometryValueFunction");
    try {
Token fct=null, end=null; ADQLOperand coordSys, width, height; ADQLOperand[] coords = null, tmp; Vector<ADQLOperand> vCoords; ADQLOperand op=null; GeometryValue<GeometryFunction> gvf = null, gvp = null; GeometryFunction gf = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOX:{
          gf = Box();
          break;
          }
        case CENTROID:{
          gf = Centroid();
          break;
          }
        case CIRCLE:{
          gf = Circle();
          break;
          }
        case POINT:{
          gf = Point();
          break;
          }
        case POLYGON:{
          gf = Polygon();
          break;
          }
        case REGION:{
          fct = jj_consume_token(REGION);
          jj_consume_token(LEFT_PAR);
          op = StringExpression();
          end = jj_consume_token(RIGHT_PAR);
gf = queryFactory.createRegion(op);
                    gf.setPosition(new TextPosition(fct, end));
          break;
          }
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
{if ("" != null) return gf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GeometryValueFunction");
    }
}

  final public GeometryFunction Box() throws ParseException {
    trace_call("Box");
    try {
GeometryFunction gf;
      if (jj_2_26(2147483647)) {
        gf = BoxWithPoint();
      } else if (jj_2_27(2147483647)) {
        gf = BoxWithCoordsAndNoCoordSys();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOX:{
          gf = BoxWithCoordsAndCoordSys();
          break;
          }
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return gf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Box");
    }
}

  final public GeometryFunction BoxWithPoint() throws ParseException {
    trace_call("BoxWithPoint");
    try {
Token fct=null, end=null; ADQLOperand coordSys=null; ADQLOperand width, height; GeometryValue<GeometryFunction> center = null;
      fct = jj_consume_token(BOX);
      jj_consume_token(LEFT_PAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL:
      case STRING_LITERAL:{
        coordSys = CoordinateSystem();
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      // coord_sys (deprecated since ADQL-2.1)
                      center = PointValue();
      jj_consume_token(COMMA);
      width = NumericExpression();
      jj_consume_token(COMMA);
      height = NumericExpression();
      // height
              end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createBox(coordSys, center, width, height);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BoxWithPoint");
    }
}

  final public GeometryFunction BoxWithCoordsAndCoordSys() throws ParseException {
    trace_call("BoxWithCoordsAndCoordSys");
    try {
Token fct=null, end=null; ADQLOperand coordSys=null; ADQLOperand width, height; ADQLOperand[] coords = null;
      fct = jj_consume_token(BOX);
      jj_consume_token(LEFT_PAR);
      coordSys = CoordinateSystem();
      jj_consume_token(COMMA);
      // coord_sys (deprecated since ADQL-2.1)
                      coords = Coordinates();
      jj_consume_token(COMMA);
      width = NumericExpression();
      jj_consume_token(COMMA);
      height = NumericExpression();
      // height
              end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createBox(coordSys, coords[0], coords[1], width, height);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BoxWithCoordsAndCoordSys");
    }
}

  final public GeometryFunction BoxWithCoordsAndNoCoordSys() throws ParseException {
    trace_call("BoxWithCoordsAndNoCoordSys");
    try {
Token fct=null, end=null; ADQLOperand width, height; ADQLOperand[] coords = null;
      fct = jj_consume_token(BOX);
      jj_consume_token(LEFT_PAR);
      coords = Coordinates();
      jj_consume_token(COMMA);
      width = NumericExpression();
      jj_consume_token(COMMA);
      height = NumericExpression();
      // height
              end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createBox(null, coords[0], coords[1], width, height);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BoxWithCoordsAndNoCoordSys");
    }
}

  final public GeometryFunction Circle() throws ParseException {
    trace_call("Circle");
    try {
GeometryFunction gf;
      if (jj_2_28(2147483647)) {
        gf = CircleWithPoint();
      } else if (jj_2_29(2147483647)) {
        gf = CircleWithCoordsAndNoCoordSys();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CIRCLE:{
          gf = CircleWithCoordsAndCoordSys();
          break;
          }
        default:
          jj_la1[102] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return gf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Circle");
    }
}

  final public GeometryFunction CircleWithPoint() throws ParseException {
    trace_call("CircleWithPoint");
    try {
Token fct=null, end=null; ADQLOperand coordSys=null; ADQLOperand width; GeometryValue<GeometryFunction> center = null;
      fct = jj_consume_token(CIRCLE);
      jj_consume_token(LEFT_PAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL:
      case STRING_LITERAL:{
        coordSys = CoordinateSystem();
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      // coord_sys (deprecated since ADQL-2.1)
                      center = PointValue();
      jj_consume_token(COMMA);
      width = NumericExpression();
      // radius
              end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createCircle(coordSys, center, width);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CircleWithPoint");
    }
}

  final public GeometryFunction CircleWithCoordsAndCoordSys() throws ParseException {
    trace_call("CircleWithCoordsAndCoordSys");
    try {
Token fct=null, end=null; ADQLOperand coordSys=null; ADQLOperand width; ADQLOperand[] coords = null;
      fct = jj_consume_token(CIRCLE);
      jj_consume_token(LEFT_PAR);
      coordSys = CoordinateSystem();
      jj_consume_token(COMMA);
      // coord_sys (deprecated since ADQL-2.1)
                      coords = Coordinates();
      jj_consume_token(COMMA);
      width = NumericExpression();
      // radius
              end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createCircle(coordSys, coords[0], coords[1], width);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CircleWithCoordsAndCoordSys");
    }
}

  final public GeometryFunction CircleWithCoordsAndNoCoordSys() throws ParseException {
    trace_call("CircleWithCoordsAndNoCoordSys");
    try {
Token fct=null, end=null; ADQLOperand width; ADQLOperand[] coords = null;
      fct = jj_consume_token(CIRCLE);
      jj_consume_token(LEFT_PAR);
      coords = Coordinates();
      jj_consume_token(COMMA);
      width = NumericExpression();
      // radius
              end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createCircle(null, coords[0], coords[1], width);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CircleWithCoordsAndNoCoordSys");
    }
}

  final public CentroidFunction Centroid() throws ParseException {
    trace_call("Centroid");
    try {
Token fct=null, end=null; GeometryValue<GeometryFunction> gvf = null;
      fct = jj_consume_token(CENTROID);
      jj_consume_token(LEFT_PAR);
      gvf = GeometryExpression();
      end = jj_consume_token(RIGHT_PAR);
try {
                        CentroidFunction cf = queryFactory.createCentroid(gvf);
                        cf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return cf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Centroid");
    }
}

  final public PointFunction Point() throws ParseException {
    trace_call("Point");
    try {
PointFunction pf;
      if (jj_2_30(2147483647)) {
        pf = PointWithoutCoordSys();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case POINT:{
          pf = PointWithCoordSys();
          break;
          }
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return pf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Point");
    }
}

  final public PointFunction PointWithoutCoordSys() throws ParseException {
    trace_call("PointWithoutCoordSys");
    try {
Token start, end; ADQLOperand[] coords; PointFunction pf;
      start = jj_consume_token(POINT);
      jj_consume_token(LEFT_PAR);
      coords = Coordinates();
      end = jj_consume_token(RIGHT_PAR);
try{
                        pf = queryFactory.createPoint(null, coords[0], coords[1]);
                        pf.setPosition(new TextPosition(start, end));
                        {if ("" != null) return pf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PointWithoutCoordSys");
    }
}

  final public PointFunction PointWithCoordSys() throws ParseException {
    trace_call("PointWithCoordSys");
    try {
Token start, end; ADQLOperand coordSys=null; ADQLOperand[] coords; PointFunction pf;
      start = jj_consume_token(POINT);
      jj_consume_token(LEFT_PAR);
      coordSys = CoordinateSystem();
      jj_consume_token(COMMA);
      // coord_sys (deprecated since ADQL-2.1)
                      coords = Coordinates();
      // coordinates
              end = jj_consume_token(RIGHT_PAR);
try{
                        pf = queryFactory.createPoint(coordSys, coords[0], coords[1]);
                        pf.setPosition(new TextPosition(start, end));
                        {if ("" != null) return pf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PointWithCoordSys");
    }
}

  final public GeometryFunction Polygon() throws ParseException {
    trace_call("Polygon");
    try {
GeometryFunction gf;
      if (jj_2_31(2147483647)) {
        gf = PolygonWithPoints();
      } else if (jj_2_32(2147483647)) {
        gf = PolygonWithCoordsAndNoCoordSys();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case POLYGON:{
          gf = PolygonWithCoordsAndCoordSys();
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return gf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Polygon");
    }
}

  final public GeometryFunction PolygonWithPoints() throws ParseException {
    trace_call("PolygonWithPoints");
    try {
Token fct=null, end=null; ADQLOperand coordSys=null; GeometryValue<GeometryFunction> tmp; Vector<ADQLOperand> vCoords;
      fct = jj_consume_token(POLYGON);
      jj_consume_token(LEFT_PAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL:
      case STRING_LITERAL:{
        coordSys = CoordinateSystem();
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        ;
      }
vCoords = new Vector<ADQLOperand>();
      // points (min. 3)
                       tmp = PointValue();
vCoords.add(tmp);
      jj_consume_token(COMMA);
      tmp = PointValue();
vCoords.add(tmp);
      jj_consume_token(COMMA);
      tmp = PointValue();
vCoords.add(tmp);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[107] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        tmp = PointValue();
vCoords.add(tmp);
      }
      end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createPolygon(coordSys, vCoords);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PolygonWithPoints");
    }
}

  final public GeometryFunction PolygonWithCoordsAndCoordSys() throws ParseException {
    trace_call("PolygonWithCoordsAndCoordSys");
    try {
Token fct=null, end=null; ADQLOperand coordSys=null; ADQLOperand[] coords, tmp; Vector<ADQLOperand> vCoords;
      fct = jj_consume_token(POLYGON);
      jj_consume_token(LEFT_PAR);
      coordSys = CoordinateSystem();
      jj_consume_token(COMMA);
vCoords = new Vector<ADQLOperand>();
      // coordinates (min. 3 pairs)
                       tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      jj_consume_token(COMMA);
      tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      jj_consume_token(COMMA);
      tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[108] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      }
      end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createPolygon(coordSys, vCoords);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PolygonWithCoordsAndCoordSys");
    }
}

  final public GeometryFunction PolygonWithCoordsAndNoCoordSys() throws ParseException {
    trace_call("PolygonWithCoordsAndNoCoordSys");
    try {
Token fct=null, end=null; ADQLOperand[] coords, tmp; Vector<ADQLOperand> vCoords;
      fct = jj_consume_token(POLYGON);
      jj_consume_token(LEFT_PAR);
vCoords = new Vector<ADQLOperand>();
      // coordinates (min. 3 pairs)
                       tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      jj_consume_token(COMMA);
      tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      jj_consume_token(COMMA);
      tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[109] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        tmp = Coordinates();
vCoords.add(tmp[0]); vCoords.add(tmp[1]);
      }
      end = jj_consume_token(RIGHT_PAR);
try {
                        GeometryFunction gf = queryFactory.createPolygon(null, vCoords);
                        gf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PolygonWithCoordsAndNoCoordSys");
    }
}

  final public GeometryFunction ExtractCoordSys() throws ParseException {
    trace_call("ExtractCoordSys");
    try {
Token start, end; GeometryValue<GeometryFunction> gvf;
      start = jj_consume_token(COORDSYS);
      jj_consume_token(LEFT_PAR);
      gvf = GeometryExpression();
      end = jj_consume_token(RIGHT_PAR);
try{
                        GeometryFunction gf = queryFactory.createExtractCoordSys(gvf);
                        gf.setPosition(new TextPosition(start, end));
                        {if ("" != null) return gf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExtractCoordSys");
    }
}

/* **************** */
/* STRING FUNCTIONS */
/* **************** */
  final public 
LowerFunction LowerFunction() throws ParseException {
    trace_call("LowerFunction");
    try {
Token start, end; ADQLOperand str;
      start = jj_consume_token(LOWER);
      jj_consume_token(LEFT_PAR);
      str = StringExpression();
      end = jj_consume_token(RIGHT_PAR);
try{
                        LowerFunction lf = queryFactory.createLowerFunction(str);
                        lf.setPosition(new TextPosition(start, end));
                        {if ("" != null) return lf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("LowerFunction");
    }
}

  final public UpperFunction UpperFunction() throws ParseException {
    trace_call("UpperFunction");
    try {
Token start, end; ADQLOperand str;
      start = jj_consume_token(UPPER);
      jj_consume_token(LEFT_PAR);
      str = StringExpression();
      end = jj_consume_token(RIGHT_PAR);
try{
                        UpperFunction lf = queryFactory.createUpperFunction(str);
                        lf.setPosition(new TextPosition(start, end));
                        {if ("" != null) return lf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("UpperFunction");
    }
}

/* ***************** */
/* NUMERIC FUNCTIONS */
/* ***************** */
  final public ADQLFunction NumericFunction() throws ParseException {
    trace_call("NumericFunction");
    try {
ADQLFunction fct;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case LOG10:
      case MOD:
      case PI:
      case POWER:
      case RADIANS:
      case RAND:
      case ROUND:
      case SQRT:
      case TRUNCATE:{
        fct = MathFunction();
        break;
        }
      case ACOS:
      case ASIN:
      case ATAN:
      case ATAN2:
      case COS:
      case COT:
      case SIN:
      case TAN:{
        fct = TrigFunction();
        break;
        }
      case CONTAINS:
      case INTERSECTS:
      case AREA:
      case COORD1:
      case COORD2:
      case DISTANCE:{
        fct = GeometryFunction();
        break;
        }
      case IN_UNIT:{
        fct = InUnitFunction();
        break;
        }
      case CAST:{
        fct = NumericCastFunction();
        break;
        }
      case REGULAR_IDENTIFIER_CANDIDATE:{
        fct = UserDefinedFunction();
((UserDefinedFunction)fct).setExpectedType('N');
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return fct;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NumericFunction");
    }
}

  final public InUnitFunction InUnitFunction() throws ParseException {
    trace_call("InUnitFunction");
    try {
Token start, end; ADQLOperand value, destUnit;
      start = jj_consume_token(IN_UNIT);
      jj_consume_token(LEFT_PAR);
      value = NumericExpression();
      jj_consume_token(COMMA);
      destUnit = StringExpression();
      end = jj_consume_token(RIGHT_PAR);
try {
                        InUnitFunction fct = queryFactory.createInUnitFunction(value, destUnit);
                        fct.setPosition(new TextPosition(start, end));
                        {if ("" != null) return fct;}
                }catch(Exception ex) {
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("InUnitFunction");
    }
}

  final public MathFunction MathFunction() throws ParseException {
    trace_call("MathFunction");
    try {
Token fct=null, end; ADQLOperand param1=null, param2=null; NumericConstant integerValue = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABS:{
          fct = jj_consume_token(ABS);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case CEILING:{
          fct = jj_consume_token(CEILING);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case DEGREES:{
          fct = jj_consume_token(DEGREES);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case EXP:{
          fct = jj_consume_token(EXP);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case FLOOR:{
          fct = jj_consume_token(FLOOR);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case LOG:{
          fct = jj_consume_token(LOG);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case LOG10:{
          fct = jj_consume_token(LOG10);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case MOD:{
          fct = jj_consume_token(MOD);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          jj_consume_token(COMMA);
          param2 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case PI:{
          fct = jj_consume_token(PI);
          jj_consume_token(LEFT_PAR);
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case POWER:{
          fct = jj_consume_token(POWER);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          jj_consume_token(COMMA);
          param2 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case RADIANS:{
          fct = jj_consume_token(RADIANS);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case RAND:{
          fct = jj_consume_token(RAND);
          jj_consume_token(LEFT_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LEFT_PAR:
          case PLUS:
          case MINUS:
          case NULL:
          case AVG:
          case MAX:
          case MIN:
          case SUM:
          case COUNT:
          case CONTAINS:
          case INTERSECTS:
          case AREA:
          case COORD1:
          case COORD2:
          case DISTANCE:
          case CAST:
          case ABS:
          case CEILING:
          case DEGREES:
          case EXP:
          case FLOOR:
          case LOG:
          case LOG10:
          case MOD:
          case PI:
          case POWER:
          case RADIANS:
          case RAND:
          case ROUND:
          case SQRT:
          case TRUNCATE:
          case ACOS:
          case ASIN:
          case ATAN:
          case ATAN2:
          case COS:
          case COT:
          case SIN:
          case TAN:
          case IN_UNIT:
          case SCIENTIFIC_NUMBER:
          case UNSIGNED_FLOAT:
          case UNSIGNED_INTEGER:
          case DELIMITED_IDENTIFIER:
          case REGULAR_IDENTIFIER_CANDIDATE:{
            param1 = NumericExpression();
            break;
            }
          default:
            jj_la1[111] = jj_gen;
            ;
          }
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case ROUND:{
          fct = jj_consume_token(ROUND);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            jj_consume_token(COMMA);
            param2 = SignedInteger();
            break;
            }
          default:
            jj_la1[112] = jj_gen;
            ;
          }
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case SQRT:{
          fct = jj_consume_token(SQRT);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        case TRUNCATE:{
          fct = jj_consume_token(TRUNCATE);
          jj_consume_token(LEFT_PAR);
          param1 = NumericExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            jj_consume_token(COMMA);
            param2 = SignedInteger();
            break;
            }
          default:
            jj_la1[113] = jj_gen;
            ;
          }
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
MathFunction mf = queryFactory.createMathFunction(MathFunctionType.valueOf(fct.image.toUpperCase()), param1, param2);
                        mf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return mf;}
      } catch (Exception ex) {
{if (true) throw generateParseException(ex);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MathFunction");
    }
}

  final public MathFunction TrigFunction() throws ParseException {
    trace_call("TrigFunction");
    try {
Token fct=null, end; ADQLOperand param1=null, param2=null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACOS:{
        fct = jj_consume_token(ACOS);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case ASIN:{
        fct = jj_consume_token(ASIN);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case ATAN:{
        fct = jj_consume_token(ATAN);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case ATAN2:{
        fct = jj_consume_token(ATAN2);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        jj_consume_token(COMMA);
        param2 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case COS:{
        fct = jj_consume_token(COS);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case COT:{
        fct = jj_consume_token(COT);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case SIN:{
        fct = jj_consume_token(SIN);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      case TAN:{
        fct = jj_consume_token(TAN);
        jj_consume_token(LEFT_PAR);
        param1 = NumericExpression();
        end = jj_consume_token(RIGHT_PAR);
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
try{
                        MathFunction mf = queryFactory.createMathFunction(MathFunctionType.valueOf(fct.image.toUpperCase()), param1, param2);
                        mf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return mf;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TrigFunction");
    }
}

/* ************* */
/* CAST FUNCTION */
/* ************* */
  final public 
CastFunction NumericCastFunction() throws ParseException {
    trace_call("NumericCastFunction");
    try {
CastFunction fct;
      fct = CastFunction('N');
fct.setExpectedType('N');
          {if ("" != null) return fct;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NumericCastFunction");
    }
}

  final public CastFunction StringCastFunction() throws ParseException {
    trace_call("StringCastFunction");
    try {
CastFunction fct;
      fct = CastFunction('S');
fct.setExpectedType('S');
          {if ("" != null) return fct;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StringCastFunction");
    }
}

  final public CastFunction GeometricCastFunction() throws ParseException {
    trace_call("GeometricCastFunction");
    try {
CastFunction fct;
      fct = CastFunction('G');
fct.setExpectedType('G');
          {if ("" != null) return fct;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("GeometricCastFunction");
    }
}

  final public CastFunction CastFunction(char expectedType) throws ParseException {
    trace_call("CastFunction");
    try {
Token fct, end, typeName, typeSize=null; ADQLOperand value=null; TargetType type;
      fct = jj_consume_token(CAST);
      jj_consume_token(LEFT_PAR);
      value = ValueExpression();
      jj_consume_token(AS);
      type = CastDatatype(expectedType);
      end = jj_consume_token(RIGHT_PAR);
try{
                        CastFunction cast = queryFactory.createCastFunction(value, type);
                        cast.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return cast;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CastFunction");
    }
}

  final public TargetType CastDatatype(char expectedType) throws ParseException {
    trace_call("CastDatatype");
    try {
Token typeName, typeLength=null, start=null, end=null; String customName = null; ADQLOperand param; ArrayList<ADQLOperand> customParams = new ArrayList<ADQLOperand>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CIRCLE:
      case POINT:
      case POLYGON:
      case NO_LENGTH_DATATYPE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NO_LENGTH_DATATYPE:{
          typeName = jj_consume_token(NO_LENGTH_DATATYPE);
          break;
          }
        case POINT:{
          typeName = jj_consume_token(POINT);
          break;
          }
        case CIRCLE:{
          typeName = jj_consume_token(CIRCLE);
          break;
          }
        case POLYGON:{
          typeName = jj_consume_token(POLYGON);
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case VARIABLE_LENGTH_DATATYPE:{
        typeName = jj_consume_token(VARIABLE_LENGTH_DATATYPE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_PAR:{
          jj_consume_token(LEFT_PAR);
          typeLength = jj_consume_token(UNSIGNED_INTEGER);
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        default:
          jj_la1[117] = jj_gen;
          ;
        }
        break;
        }
      case REGULAR_IDENTIFIER_CANDIDATE:{
        start = jj_consume_token(REGULAR_IDENTIFIER_CANDIDATE);
customName = start.image; typeName = start;
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case REGULAR_IDENTIFIER_CANDIDATE:{
            ;
            break;
            }
          default:
            jj_la1[118] = jj_gen;
            break label_18;
          }
          typeName = jj_consume_token(REGULAR_IDENTIFIER_CANDIDATE);
customName += " "+typeName.image;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_PAR:{
          jj_consume_token(LEFT_PAR);
          param = ValueExpression();
customParams.add(param);
          label_19:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[119] = jj_gen;
              break label_19;
            }
            jj_consume_token(COMMA);
            param = ValueExpression();
customParams.add(param);
          }
          end = jj_consume_token(RIGHT_PAR);
          break;
          }
        default:
          jj_la1[120] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
try{
                        TargetType type;
                        if (customName != null) {
                                type = new CustomTargetType(customName, customParams.toArray(new ADQLOperand[customParams.size()]));
                        }else{
                                type = new StandardTargetType(typeName.image, (typeLength == null ? -1 : Integer.parseInt(typeLength.image)));
                        }
                        if (end != null)
                                type.setPosition(new TextPosition((start != null ? start : typeName), end));
                        else
                                type.setPosition(new TextPosition(start != null ? start : typeName));

                        // Ensure the returned datatype matched the expectation:
                        final String typeNameStr = (customName == null ? typeName.image : customName);
                        switch(expectedType) {
                          case 'n':
                          case 'N':
                                if (!type.isNumeric()) {
                                        StringBuilder buf = new StringBuilder("Encountered: \"");
                                        buf.append(typeNameStr).append("\"!");
                                        buf.append(" Was expecting one numeric datatype among: ");
                                        boolean first = true;
                                        for(DBDatatype d : StandardTargetType.getNumericDatatypes()) {
                                                if (!first) buf.append(", ");
                                                buf.append('"').append((d == DBDatatype.DOUBLE ? "DOUBLE PRECISION" : d.toString())).append('"');
                                                first = false;
                                        }
                                        buf.append('.');
                                        {if (true) throw new ParseException(buf.toString(), type.getPosition());}
                                }
                                break;
                          case 's':
                          case 'S':
                                if (!type.isString()) {
                                        StringBuilder buf = new StringBuilder("Encountered: \"");
                                        buf.append(typeNameStr).append("\"!");
                                        buf.append(" Was expecting one character datatype among: ");
                                        boolean first = true;
                                        for(DBDatatype d : StandardTargetType.getStringDatatypes()) {
                                                if (!first) buf.append(", ");
                                                buf.append('"').append(d.toString()).append('"');
                                                first = false;
                                        }
                                        buf.append('.');
                                        {if (true) throw new ParseException(buf.toString(), type.getPosition());}
                                }
                                break;
                          case 'g':
                          case 'G':
                                if (!type.isGeometry()) {
                                        StringBuilder buf = new StringBuilder("Encountered: \"");
                                        buf.append(typeNameStr).append("\"!");
                                        buf.append(" Was expecting one geometric datatype among: ");
                                        boolean first = true;
                                        for(DBDatatype d : StandardTargetType.getGeometricDatatypes()) {
                                                if (!first) buf.append(", ");
                                                buf.append('"').append(d.toString()).append('"');
                                                first = false;
                                        }
                                        buf.append('.');
                                        {if (true) throw new ParseException(buf.toString(), type.getPosition());}
                                }
                                break;
                        }

                        {if ("" != null) return type;}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CastDatatype");
    }
}

/* ********************* */
/* CONDITIONAL FUNCTIONS */
/* ********************* */
  final public 
ADQLOperand ConditionalFunction() throws ParseException {
    trace_call("ConditionalFunction");
    try {
Token fct, end; ArrayList<ADQLOperand> operands = new ArrayList<ADQLOperand>(3); ADQLOperand op;
      fct = jj_consume_token(COALESCE);
      jj_consume_token(LEFT_PAR);
      op = ValueExpression();
operands.add(op);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[122] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        op = ValueExpression();
operands.add(op);
      }
      end = jj_consume_token(RIGHT_PAR);
try{
            CoalesceFunction coalesce = queryFactory.createCoalesceFunction(operands);
            coalesce.setPosition(new TextPosition(fct, end));
            {if ("" != null) return coalesce;}
        }catch(Exception ex){
            {if (true) throw generateParseException(ex);}
        }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ConditionalFunction");
    }
}

/* ********************* */
/* USER DEFINED FUNCTION */
/* ********************* */
  final public 
UserDefinedFunction UserDefinedFunction() throws ParseException {
    trace_call("UserDefinedFunction");
    try {
Token fct, end; Vector<ADQLOperand> params = new Vector<ADQLOperand>(); ADQLOperand op;
      fct = jj_consume_token(REGULAR_IDENTIFIER_CANDIDATE);
      jj_consume_token(LEFT_PAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_PAR:
      case PLUS:
      case MINUS:
      case NULL:
      case AVG:
      case MAX:
      case MIN:
      case SUM:
      case COUNT:
      case BOX:
      case CENTROID:
      case CIRCLE:
      case POINT:
      case POLYGON:
      case REGION:
      case CONTAINS:
      case INTERSECTS:
      case AREA:
      case COORD1:
      case COORD2:
      case COORDSYS:
      case DISTANCE:
      case CAST:
      case LOWER:
      case UPPER:
      case ABS:
      case CEILING:
      case DEGREES:
      case EXP:
      case FLOOR:
      case LOG:
      case LOG10:
      case MOD:
      case PI:
      case POWER:
      case RADIANS:
      case RAND:
      case ROUND:
      case SQRT:
      case TRUNCATE:
      case ACOS:
      case ASIN:
      case ATAN:
      case ATAN2:
      case COS:
      case COT:
      case SIN:
      case TAN:
      case IN_UNIT:
      case COALESCE:
      case STRING_LITERAL:
      case SCIENTIFIC_NUMBER:
      case UNSIGNED_FLOAT:
      case UNSIGNED_INTEGER:
      case DELIMITED_IDENTIFIER:
      case REGULAR_IDENTIFIER_CANDIDATE:{
        op = ValueExpression();
params.add(op);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[123] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          op = ValueExpression();
params.add(op);
        }
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        ;
      }
      end = jj_consume_token(RIGHT_PAR);
// Ensure the given function name is valid: 
                if (!isRegularIdentifier(fct.image))
                        {if (true) throw new ParseException("Invalid (User Defined) Function name: \""+fct.image+"\"!", new TextPosition(fct));}

                try{
                        //  Build the parameters list:
                        ADQLOperand[] parameters = new ADQLOperand[params.size()];
                        for(int i=0; i<params.size(); i++)
                                parameters[i] = params.get(i);

                        // Create the UDF function:
                        UserDefinedFunction udf = queryFactory.createUserDefinedFunction(fct.image, parameters);
                        udf.setPosition(new TextPosition(fct, end));
                        {if ("" != null) return udf;}

                }catch(UnsupportedOperationException uoe){
                        /* This catch clause is just for backward compatibility:
		  	 * if the createUserDefinedFunction(...) is overridden and
		  	 * the function can not be identified a such exception may be thrown). */
                        {if (true) throw new ParseException(uoe.getMessage(), new TextPosition(fct, token));}
                }catch(Exception ex){
                        {if (true) throw generateParseException(ex);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("UserDefinedFunction");
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_3R_Box_1520_13_130()
 {
    if (jj_3R_BoxWithCoordsAndNoCoordSys_1565_9_40()) return true;
    return false;
  }

  private boolean jj_3R_Box_1523_9_131()
 {
    if (jj_3R_BoxWithCoordsAndCoordSys_1547_9_201()) return true;
    return false;
  }

  private boolean jj_3R_Identifier_751_9_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Identifier_752_17_46()) {
    jj_scanpos = xsp;
    if (jj_3R_Identifier_758_17_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_Box_1516_9_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Box_1517_17_129()) {
    jj_scanpos = xsp;
    if (jj_3R_Box_1520_13_130()) {
    jj_scanpos = xsp;
    if (jj_3R_Box_1523_9_131()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1502_19_58()
 {
    if (jj_scan_token(REGION)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_StringExpression_1116_9_37()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1496_19_57()
 {
    if (jj_3R_Polygon_1696_9_94()) return true;
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1493_19_56()
 {
    if (jj_3R_Point_1658_9_93()) return true;
    return false;
  }

  private boolean jj_3R_Offset_733_9_248()
 {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1490_19_55()
 {
    if (jj_3R_Circle_1582_9_92()) return true;
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1487_19_54()
 {
    if (jj_3R_Centroid_1645_9_91()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_725_11_255()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_OrderItem_806_9_254()) return true;
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1484_18_53()
 {
    if (jj_3R_Box_1516_9_90()) return true;
    return false;
  }

  private boolean jj_3R_OrderBy_724_9_247()
 {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_OrderItem_806_9_254()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_OrderBy_725_11_255()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_GeometryFunction_1398_102_235()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1397_102_233()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_Having_715_9_271()
 {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_ConditionsList_1180_9_102()) return true;
    return false;
  }

  private boolean jj_3R_GeometryValueFunction_1481_9_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeometryValueFunction_1484_18_53()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryValueFunction_1487_19_54()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryValueFunction_1490_19_55()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryValueFunction_1493_19_56()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryValueFunction_1496_19_57()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryValueFunction_1502_19_58()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_CoordinateSystem_1475_11_184()
 {
    if (jj_3R_String_924_9_31()) return true;
    return false;
  }

  private boolean jj_3R_GroupBy_707_11_274()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_GroupBy_706_9_270()
 {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_GroupBy_707_11_274()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CoordinateSystem_1473_9_116()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CoordinateSystem_1474_7_183()) {
    jj_scanpos = xsp;
    if (jj_3R_CoordinateSystem_1475_11_184()) return true;
    }
    return false;
  }

  private boolean jj_3R_CoordinateSystem_1474_7_183()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_Where_697_9_269()
 {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_ConditionsList_1180_9_102()) return true;
    return false;
  }

  private boolean jj_3R_SelectItem_662_39_275()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_Identifier_751_9_22()) return true;
    return false;
  }

  private boolean jj_3R_From_683_18_268()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TableRef_871_9_267()) return true;
    return false;
  }

  private boolean jj_3R_DistanceFunction2_1456_9_38()
 {
    if (jj_scan_token(DISTANCE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_PointValue_1438_9_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PointValue_1438_9_73()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_From_681_9_259()
 {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_TableRef_871_9_267()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_From_683_18_268()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_PointValue_1441_11_115()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_SelectItem_643_41_48()
 {
    if (jj_3R_Identifier_751_9_22()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_UserDefinedFunction_2035_9_34()) return true;
    return false;
  }

  private boolean jj_3R_PointValue_1439_11_114()
 {
    if (jj_3R_Centroid_1645_9_91()) return true;
    return false;
  }

  private boolean jj_3R_PointValue_1438_11_113()
 {
    if (jj_3R_Point_1658_9_93()) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1398_51_234()
 {
    if (jj_3R_Point_1658_9_93()) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1397_51_232()
 {
    if (jj_3R_Point_1658_9_93()) return true;
    return false;
  }

  private boolean jj_3R_SqlFunction_1357_91_236()
 {
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_PointValue_1438_9_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PointValue_1438_11_113()) {
    jj_scanpos = xsp;
    if (jj_3R_PointValue_1439_11_114()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_PointValue_1441_11_115()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_SelectItem_662_17_273()
 {
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectItem_662_39_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DistanceFunction_1419_25_223()
 {
    if (jj_scan_token(DISTANCE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_DistanceFunction2_1456_9_38()) return true;
    return false;
  }

  private boolean jj_3R_SelectItem_641_33_23()
 {
    if (jj_3R_Identifier_751_9_22()) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectItem_643_41_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DistanceFunction_1415_18_222()
 {
    if (jj_3R_DistanceFunction2_1456_9_38()) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1399_25_173()
 {
    if (jj_3R_DistanceFunction_1413_9_209()) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1398_25_172()
 {
    if (jj_scan_token(COORD2)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeometryFunction_1398_51_234()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryFunction_1398_102_235()) return true;
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1397_25_171()
 {
    if (jj_scan_token(COORD1)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeometryFunction_1397_51_232()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryFunction_1397_102_233()) return true;
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_DistanceFunction_1413_9_209()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DistanceFunction_1415_18_222()) {
    jj_scanpos = xsp;
    if (jj_3R_DistanceFunction_1419_25_223()) return true;
    }
    return false;
  }

  private boolean jj_3R_GeometryFunction_1396_25_170()
 {
    if (jj_scan_token(AREA)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_GeometryExpression_1155_9_193()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_SelectItem_630_17_272()
 {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_Identifier_751_9_22()) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectItem_641_33_23()) jj_scanpos = xsp;
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1388_25_169()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_GeometryExpression_1155_9_193()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_GeometryExpression_1155_9_193()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_SelectItem_629_9_265()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SelectItem_630_17_272()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_SelectItem_662_17_273()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Select_620_10_266()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_SelectItem_629_9_265()) return true;
    return false;
  }

  private boolean jj_3R_GeometryFunction_1385_9_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeometryFunction_1388_25_169()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryFunction_1396_25_170()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryFunction_1397_25_171()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryFunction_1398_25_172()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryFunction_1399_25_173()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_InEnd_1327_66_250()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_Coordinates_1380_9_76()
 {
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    return false;
  }

  private boolean jj_3R_SqlFunction_1363_25_221()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    }
    if (jj_scan_token(LEFT_PAR)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Select_609_10_264()
 {
    if (jj_scan_token(TOP)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_Select_608_10_263()
 {
    if (jj_scan_token(QUANTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Select_607_9_240()
 {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Select_608_10_263()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_Select_609_10_264()) jj_scanpos = xsp;
    if (jj_3R_SelectItem_629_9_265()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Select_620_10_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_SqlFunction_1357_25_220()
 {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_3R_SqlFunction_1357_91_236()) return true;
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_SqlFunction_1355_9_208()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SqlFunction_1357_25_220()) {
    jj_scanpos = xsp;
    if (jj_3R_SqlFunction_1363_25_221()) return true;
    }
    return false;
  }

  private boolean jj_3R_UserDefinedFunction_2035_96_219()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_SubQueryExpression_574_9_24()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_QueryExpression_491_9_49()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_InEnd_1327_11_239()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InEnd_1327_66_250()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_SubQueryExpression_574_9_24()) return true;
    return false;
  }

  private boolean jj_3R_SimpleQueryExpression_557_10_262()
 {
    if (jj_3R_Having_715_9_271()) return true;
    return false;
  }

  private boolean jj_3R_InEnd_1325_9_225()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_InEnd_1327_11_239()) return true;
    }
    return false;
  }

  private boolean jj_3R_SimpleQueryExpression_556_10_261()
 {
    if (jj_3R_GroupBy_706_9_270()) return true;
    return false;
  }

  private boolean jj_3R_SimpleQueryExpression_555_10_260()
 {
    if (jj_3R_Where_697_9_269()) return true;
    return false;
  }

  private boolean jj_3R_UserDefinedFunction_2035_56_194()
 {
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_UserDefinedFunction_2035_96_219()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_SetFactor_538_17_214()
 {
    if (jj_3R_SubQueryExpression_574_9_24()) return true;
    return false;
  }

  private boolean jj_3R_SetFactor_536_17_213()
 {
    if (jj_3R_SimpleQueryExpression_544_9_226()) return true;
    return false;
  }

  private boolean jj_3R_SimpleQueryExpression_544_9_226()
 {
    if (jj_3R_Select_607_9_240()) return true;
    if (jj_3R_From_681_9_259()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SimpleQueryExpression_555_10_260()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SimpleQueryExpression_556_10_261()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_SimpleQueryExpression_557_10_262()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_BetweenEnd_1311_9_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_Predicate_1287_27_212()
 {
    if (jj_3R_InEnd_1325_9_225()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_BetweenEnd_1311_9_36()) return true;
    return false;
  }

  private boolean jj_3R_SetFactor_535_9_186()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SetFactor_536_17_213()) {
    jj_scanpos = xsp;
    if (jj_3R_SetFactor_538_17_214()) return true;
    }
    return false;
  }

  private boolean jj_3R_Predicate_1283_25_211()
 {
    if (jj_3R_ComparisonEnd_1298_9_224()) return true;
    return false;
  }

  private boolean jj_3R_ComparisonEnd_1298_9_224()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_StringExpression_1116_9_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(ILIKE)) return true;
    return false;
  }

  private boolean jj_3R_Predicate_1281_19_181()
 {
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Predicate_1283_25_211()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_Predicate_1287_27_212()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_SetTerm_520_11_253()
 {
    if (jj_scan_token(INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    if (jj_3R_SetFactor_535_9_186()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_StringExpression_1116_9_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_SetTerm_518_9_119()
 {
    if (jj_3R_SetFactor_535_9_186()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SetTerm_520_11_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Predicate_1274_19_180()
 {
    if (jj_3R_StringExpression_1116_9_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(ILIKE)) return true;
    if (jj_3R_StringExpression_1116_9_37()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_Column_795_9_30()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_Predicate_1266_19_179()
 {
    if (jj_3R_StringExpression_1116_9_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_StringExpression_1116_9_37()) return true;
    return false;
  }

  private boolean jj_3R_SetExpression_503_11_246()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    if (jj_3R_SetTerm_518_9_119()) return true;
    return false;
  }

  private boolean jj_3R_SetExpression_501_9_81()
 {
    if (jj_3R_SetTerm_518_9_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SetExpression_503_11_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Predicate_1258_19_178()
 {
    if (jj_3R_Column_795_9_30()) return true;
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_UserDefinedFunction_2035_9_34()
 {
    if (jj_scan_token(REGULAR_IDENTIFIER_CANDIDATE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UserDefinedFunction_2035_56_194()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_QueryExpression_493_10_238()
 {
    if (jj_3R_Offset_733_9_248()) return true;
    return false;
  }

  private boolean jj_3R_QueryExpression_492_10_237()
 {
    if (jj_3R_OrderBy_724_9_247()) return true;
    return false;
  }

  private boolean jj_3R_Predicate_1250_19_177()
 {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_3R_SubQueryExpression_574_9_24()) return true;
    return false;
  }

  private boolean jj_3R_QueryExpression_491_9_49()
 {
    if (jj_3R_SetExpression_501_9_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_QueryExpression_492_10_237()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_QueryExpression_493_10_238()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Constraint_1241_18_70()
 {
    if (jj_3R_Predicate_1247_9_103()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalFunction_2017_7_249()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_Predicate_1247_9_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Predicate_1250_19_177()) {
    jj_scanpos = xsp;
    if (jj_3R_Predicate_1258_19_178()) {
    jj_scanpos = xsp;
    if (jj_3R_Predicate_1266_19_179()) {
    jj_scanpos = xsp;
    if (jj_3R_Predicate_1274_19_180()) {
    jj_scanpos = xsp;
    if (jj_3R_Predicate_1281_19_181()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ConditionalFunction_2015_5_182()
 {
    if (jj_scan_token(COALESCE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalFunction_2017_7_249()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) jj_scanpos = xsp;
    if (jj_3R_Constraint_1228_9_35()) return true;
    return false;
  }

  private boolean jj_3R_Constraint_1228_10_69()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ConditionsList_1180_9_102()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Constraint_1228_9_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Constraint_1228_10_69()) {
    jj_scanpos = xsp;
    if (jj_3R_Constraint_1241_18_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_ConditionsList_1198_26_210()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_CastDatatype_1928_62_243()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_ConditionsList_1197_25_176()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_ConditionsList_1198_26_210()) jj_scanpos = xsp;
    if (jj_3R_Constraint_1228_9_35()) return true;
    return false;
  }

  private boolean jj_3R_CastDatatype_1934_34_252()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    return false;
  }

  private boolean jj_3R_ConditionsList_1181_18_175()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_CastDatatype_1932_26_245()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CastDatatype_1934_34_252()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_CastDatatype_1931_26_244()
 {
    if (jj_scan_token(REGULAR_IDENTIFIER_CANDIDATE)) return true;
    return false;
  }

  private boolean jj_3R_ConditionsList_1180_9_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionsList_1181_18_175()) jj_scanpos = xsp;
    if (jj_3R_Constraint_1228_9_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionsList_1197_25_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CastDatatype_1930_25_230()
 {
    if (jj_scan_token(REGULAR_IDENTIFIER_CANDIDATE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CastDatatype_1931_26_244()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_CastDatatype_1932_26_245()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CastDatatype_1928_25_229()
 {
    if (jj_scan_token(VARIABLE_LENGTH_DATATYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CastDatatype_1928_62_243()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CastDatatype_1926_25_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_GeometryExpression_1159_19_217()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_UserDefinedFunction_2035_9_34()) return true;
    return false;
  }

  private boolean jj_3R_GeometryExpression_1157_19_216()
 {
    if (jj_3R_GeometricCastFunction_1904_9_227()) return true;
    return false;
  }

  private boolean jj_3R_GeometryExpression_1156_19_215()
 {
    if (jj_3R_GeometryValueFunction_1481_9_29()) return true;
    return false;
  }

  private boolean jj_3R_CastDatatype_1925_9_218()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CastDatatype_1926_25_228()) {
    jj_scanpos = xsp;
    if (jj_3R_CastDatatype_1928_25_229()) {
    jj_scanpos = xsp;
    if (jj_3R_CastDatatype_1930_25_230()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_GeometryExpression_1155_9_193()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeometryExpression_1156_19_215()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryExpression_1157_19_216()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_GeometryExpression_1159_19_217()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_StringFactor_1150_11_89()
 {
    if (jj_3R_StringValueExpressionPrimary_1012_9_128()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_UserDefinedFunction_2035_9_34()) return true;
    return false;
  }

  private boolean jj_3R_StringFactor_1148_11_88()
 {
    if (jj_3R_StringCastFunction_1896_9_127()) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1852_74_242()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_SignedInteger_975_9_251()) return true;
    return false;
  }

  private boolean jj_3R_StringFactor_1147_11_87()
 {
    if (jj_3R_UpperFunction_1798_9_126()) return true;
    return false;
  }

  private boolean jj_3R_StringFactor_1146_11_86()
 {
    if (jj_3R_LowerFunction_1785_9_125()) return true;
    return false;
  }

  private boolean jj_3R_StringFactor_1145_10_85()
 {
    if (jj_3R_ExtractCoordSys_1768_9_124()) return true;
    return false;
  }

  private boolean jj_3R_StringFactor_1145_9_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StringFactor_1145_10_85()) {
    jj_scanpos = xsp;
    if (jj_3R_StringFactor_1146_11_86()) {
    jj_scanpos = xsp;
    if (jj_3R_StringFactor_1147_11_87()) {
    jj_scanpos = xsp;
    if (jj_3R_StringFactor_1148_11_88()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_StringFactor_1150_11_89()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_CastFunction_1912_9_174()
 {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_CastDatatype_1925_9_218()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1850_71_241()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_SignedInteger_975_9_251()) return true;
    return false;
  }

  private boolean jj_3R_Factor_1099_54_62()
 {
    if (jj_3R_NumericValueExpressionPrimary_994_9_96()) return true;
    return false;
  }

  private boolean jj_3R_GeometricCastFunction_1904_9_227()
 {
    if (jj_3R_CastFunction_1912_9_174()) return true;
    return false;
  }

  private boolean jj_3R_StringCastFunction_1896_9_127()
 {
    if (jj_3R_CastFunction_1912_9_174()) return true;
    return false;
  }

  private boolean jj_3R_StringExpression_1118_17_72()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_StringFactor_1145_9_52()) return true;
    return false;
  }

  private boolean jj_3R_NumericCastFunction_1888_9_101()
 {
    if (jj_3R_CastFunction_1912_9_174()) return true;
    return false;
  }

  private boolean jj_3R_StringExpression_1116_9_37()
 {
    if (jj_3R_StringFactor_1145_9_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_StringExpression_1118_17_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MathFunction_1849_43_231()
 {
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_NumericFunction_1814_9_33()) return true;
    return false;
  }

  private boolean jj_3R_Factor_1098_18_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  private boolean jj_3R_TrigFunction_1871_11_168()
 {
    if (jj_scan_token(TAN)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1870_11_167()
 {
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1869_11_166()
 {
    if (jj_scan_token(COT)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1868_11_165()
 {
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1867_11_164()
 {
    if (jj_scan_token(ATAN2)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1866_11_163()
 {
    if (jj_scan_token(ATAN)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1865_11_162()
 {
    if (jj_scan_token(ASIN)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_NumericTerm_1080_27_185()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    if (jj_3R_NumericTerm_1080_9_117()) return true;
    return false;
  }

  private boolean jj_3R_TrigFunction_1864_10_161()
 {
    if (jj_scan_token(ACOS)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Factor_1097_9_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Factor_1098_18_61()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_Factor_1099_54_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_TrigFunction_1864_9_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TrigFunction_1864_10_161()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1865_11_162()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1866_11_163()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1867_11_164()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1868_11_165()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1869_11_166()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1870_11_167()) {
    jj_scanpos = xsp;
    if (jj_3R_TrigFunction_1871_11_168()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_MathFunction_1852_19_160()
 {
    if (jj_scan_token(TRUNCATE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MathFunction_1852_74_242()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1851_19_159()
 {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1850_19_158()
 {
    if (jj_scan_token(ROUND)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MathFunction_1850_71_241()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1849_19_157()
 {
    if (jj_scan_token(RAND)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MathFunction_1849_43_231()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1848_19_156()
 {
    if (jj_scan_token(RADIANS)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1847_19_155()
 {
    if (jj_scan_token(POWER)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1846_19_154()
 {
    if (jj_scan_token(PI)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1845_19_153()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_null_1034_62_28()
 {
    if (jj_3R_StringFactor_1145_9_52()) return true;
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1844_19_152()
 {
    if (jj_scan_token(LOG10)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_NumericExpression_1063_32_118()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1843_19_151()
 {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1842_19_150()
 {
    if (jj_scan_token(FLOOR)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1841_19_149()
 {
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1840_19_148()
 {
    if (jj_scan_token(DEGREES)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_MathFunction_1839_19_147()
 {
    if (jj_scan_token(CEILING)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_NumericTerm_1080_9_117()
 {
    if (jj_3R_Factor_1097_9_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NumericTerm_1080_27_185()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MathFunction_1838_18_146()
 {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_null_1033_47_27()
 {
    if (jj_3R_Factor_1097_9_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_MathFunction_1837_9_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MathFunction_1838_18_146()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1839_19_147()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1840_19_148()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1841_19_149()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1842_19_150()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1843_19_151()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1844_19_152()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1845_19_153()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1846_19_154()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1847_19_155()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1848_19_156()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1849_19_157()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1850_19_158()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1851_19_159()) {
    jj_scanpos = xsp;
    if (jj_3R_MathFunction_1852_19_160()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ValueExpression_1055_19_112()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_NumericExpression_1063_9_75()
 {
    if (jj_3R_NumericTerm_1080_9_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NumericExpression_1063_32_118()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_String_924_9_31()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_NumericFunction_1814_9_33()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(COALESCE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_InUnitFunction_1824_9_100()
 {
    if (jj_scan_token(IN_UNIT)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_StringExpression_1116_9_37()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(REGULAR_IDENTIFIER_CANDIDATE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_null_1034_62_28()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_NumericFunction_1819_11_68()
 {
    if (jj_3R_UserDefinedFunction_2035_9_34()) return true;
    return false;
  }

  private boolean jj_3R_NumericFunction_1818_11_67()
 {
    if (jj_3R_NumericCastFunction_1888_9_101()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1033_28_26()) {
    jj_scanpos = xsp;
    if (jj_3R_null_1033_47_27()) return true;
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_Factor_1097_9_32()) return true;
    return false;
  }

  private boolean jj_3R_null_1033_28_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  private boolean jj_3R_NumericFunction_1817_11_66()
 {
    if (jj_3R_InUnitFunction_1824_9_100()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1041_19_111()
 {
    if (jj_3R_StringFactor_1145_9_52()) return true;
    return false;
  }

  private boolean jj_3R_NumericFunction_1816_11_65()
 {
    if (jj_3R_GeometryFunction_1385_9_99()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1040_19_110()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_NumericFunction_1815_11_64()
 {
    if (jj_3R_TrigFunction_1864_9_98()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_GeometryValueFunction_1481_9_29()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1038_19_109()
 {
    if (jj_3R_ConditionalFunction_2015_5_182()) return true;
    return false;
  }

  private boolean jj_3R_NumericFunction_1814_10_63()
 {
    if (jj_3R_MathFunction_1837_9_97()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1037_19_108()
 {
    if (jj_3R_CastFunction_1912_9_174()) return true;
    return false;
  }

  private boolean jj_3R_NumericFunction_1814_9_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NumericFunction_1814_10_63()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericFunction_1815_11_64()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericFunction_1816_11_65()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericFunction_1817_11_66()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericFunction_1818_11_67()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericFunction_1819_11_68()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ValueExpression_1036_19_107()
 {
    if (jj_3R_UserDefinedFunction_2035_9_34()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1035_19_106()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1034_19_105()
 {
    if (jj_3R_StringExpression_1116_9_37()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1033_18_104()
 {
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1025_19_200()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1023_19_199()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_ValueExpression_1032_9_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ValueExpression_1033_18_104()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1034_19_105()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1035_19_106()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1036_19_107()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1037_19_108()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1038_19_109()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1040_19_110()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1041_19_111()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_ValueExpression_1055_19_112()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1021_19_198()
 {
    if (jj_3R_SqlFunction_1355_9_208()) return true;
    return false;
  }

  private boolean jj_3R_UpperFunction_1798_9_126()
 {
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_StringExpression_1116_9_37()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1019_19_197()
 {
    if (jj_3R_UnsignedNumeric_946_9_207()) return true;
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1017_19_196()
 {
    if (jj_3R_String_924_9_31()) return true;
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1015_17_195()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_LowerFunction_1785_9_125()
 {
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_StringExpression_1116_9_37()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_886_140_189()
 {
    if (jj_scan_token(FULL)) return true;
    return false;
  }

  private boolean jj_3R_NumericValueExpressionPrimary_1005_19_145()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_NumericValueExpressionPrimary_1003_19_144()
 {
    if (jj_3R_SqlFunction_1355_9_208()) return true;
    return false;
  }

  private boolean jj_3R_StringValueExpressionPrimary_1012_9_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StringValueExpressionPrimary_1015_17_195()) {
    jj_scanpos = xsp;
    if (jj_3R_StringValueExpressionPrimary_1017_19_196()) {
    jj_scanpos = xsp;
    if (jj_3R_StringValueExpressionPrimary_1019_19_197()) {
    jj_scanpos = xsp;
    if (jj_3R_StringValueExpressionPrimary_1021_19_198()) {
    jj_scanpos = xsp;
    if (jj_3R_StringValueExpressionPrimary_1023_19_199()) {
    jj_scanpos = xsp;
    if (jj_3R_StringValueExpressionPrimary_1025_19_200()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_NumericValueExpressionPrimary_1001_19_143()
 {
    if (jj_3R_Column_795_9_30()) return true;
    return false;
  }

  private boolean jj_3R_NumericValueExpressionPrimary_999_19_142()
 {
    if (jj_3R_UnsignedNumeric_946_9_207()) return true;
    return false;
  }

  private boolean jj_3R_NumericValueExpressionPrimary_997_17_141()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_ExtractCoordSys_1768_9_124()
 {
    if (jj_scan_token(COORDSYS)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_GeometryExpression_1155_9_193()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_893_114_192()
 {
    if (jj_scan_token(FULL)) return true;
    return false;
  }

  private boolean jj_3R_PolygonWithCoordsAndNoCoordSys_1754_18_80()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    return false;
  }

  private boolean jj_3R_NumericValueExpressionPrimary_994_9_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NumericValueExpressionPrimary_997_17_141()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericValueExpressionPrimary_999_19_142()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericValueExpressionPrimary_1001_19_143()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericValueExpressionPrimary_1003_19_144()) {
    jj_scanpos = xsp;
    if (jj_3R_NumericValueExpressionPrimary_1005_19_145()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PolygonWithCoordsAndNoCoordSys_1749_9_45()
 {
    if (jj_scan_token(POLYGON)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PolygonWithCoordsAndNoCoordSys_1754_18_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_886_101_188()
 {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_PolygonWithCoordsAndCoordSys_1735_18_258()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    return false;
  }

  private boolean jj_3R_SignedInteger_975_11_256()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  private boolean jj_3R_SignedInteger_975_9_251()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SignedInteger_975_11_256()) jj_scanpos = xsp;
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_PolygonWithCoordsAndCoordSys_1729_9_204()
 {
    if (jj_scan_token(POLYGON)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PolygonWithCoordsAndCoordSys_1735_18_258()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_893_75_191()
 {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_PolygonWithPoints_1715_18_79()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PointValue_1438_9_73()) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_905_57_281()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_751_9_22()) return true;
    return false;
  }

  private boolean jj_3R_PolygonWithPoints_1710_19_78()
 {
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_PolygonWithPoints_1709_9_44()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_PolygonWithCoordsAndNoCoordSys_1749_9_45()) return true;
    return false;
  }

  private boolean jj_3R_UnsignedNumeric_946_9_207()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Polygon_1703_17_139()
 {
    if (jj_3R_PolygonWithCoordsAndCoordSys_1729_9_204()) return true;
    return false;
  }

  private boolean jj_3R_PolygonWithPoints_1709_9_44()
 {
    if (jj_scan_token(POLYGON)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PolygonWithPoints_1710_19_78()) jj_scanpos = xsp;
    if (jj_3R_PointValue_1438_9_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PointValue_1438_9_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PointValue_1438_9_73()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PolygonWithPoints_1715_18_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_886_64_187()
 {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_886_62_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JoinSpecification_886_64_187()) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_886_101_188()) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_886_140_189()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Polygon_1697_17_137()
 {
    if (jj_3R_PolygonWithPoints_1709_9_44()) return true;
    return false;
  }

  private boolean jj_3R_Polygon_1700_13_138()
 {
    if (jj_3R_PolygonWithCoordsAndNoCoordSys_1749_9_45()) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_886_52_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_886_62_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_Polygon_1696_9_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Polygon_1697_17_137()) {
    jj_scanpos = xsp;
    if (jj_3R_Polygon_1700_13_138()) {
    jj_scanpos = xsp;
    if (jj_3R_Polygon_1703_17_139()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_JoinSpecification_902_33_280()
 {
    if (jj_scan_token(USING)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_Identifier_751_9_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_JoinSpecification_905_57_281()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_String_924_10_60()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_String_924_9_31()
 {
    Token xsp;
    if (jj_3R_String_924_10_60()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_String_924_10_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_JoinSpecification_893_38_190()
 {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_893_36_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JoinSpecification_893_38_190()) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_893_75_191()) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_893_114_192()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_JoinSpecification_895_33_279()
 {
    if (jj_scan_token(ON)) return true;
    if (jj_3R_ConditionsList_1180_9_102()) return true;
    return false;
  }

  private boolean jj_3R_PointWithCoordSys_1680_9_203()
 {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinSpecification_893_26_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_893_36_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_JoinSpecification_893_25_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JoinSpecification_893_26_83()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_SimpleTableRef_837_9_84()) return true;
    xsp = jj_scanpos;
    if (jj_3R_JoinSpecification_895_33_279()) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_902_33_280()) return true;
    }
    return false;
  }

  private boolean jj_3R_JoinSpecification_886_25_50()
 {
    if (jj_scan_token(NATURAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JoinSpecification_886_52_82()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_SimpleTableRef_837_9_84()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_PointWithoutCoordSys_1667_9_43()) return true;
    return false;
  }

  private boolean jj_3R_PointWithoutCoordSys_1667_9_43()
 {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Point_1661_11_136()
 {
    if (jj_3R_PointWithCoordSys_1680_9_203()) return true;
    return false;
  }

  private boolean jj_3R_Point_1658_10_135()
 {
    if (jj_3R_PointWithoutCoordSys_1667_9_43()) return true;
    return false;
  }

  private boolean jj_3R_Point_1658_9_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Point_1658_10_135()) {
    jj_scanpos = xsp;
    if (jj_3R_Point_1661_11_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_JoinSpecification_884_9_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JoinSpecification_886_25_50()) {
    jj_scanpos = xsp;
    if (jj_3R_JoinSpecification_893_25_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_JoinedTable_878_11_278()
 {
    if (jj_3R_JoinSpecification_884_9_25()) return true;
    return false;
  }

  private boolean jj_3R_SimpleTableRef_839_50_276()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_Identifier_751_9_22()) return true;
    return false;
  }

  private boolean jj_3R_Centroid_1645_9_91()
 {
    if (jj_scan_token(CENTROID)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_GeometryExpression_1155_9_193()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_JoinedTable_877_9_277()
 {
    if (jj_3R_SimpleTableRef_837_9_84()) return true;
    Token xsp;
    if (jj_3R_JoinedTable_878_11_278()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_JoinedTable_878_11_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_SimpleTableRef_859_25_123()
 {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_JoinedTable_877_9_277()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_JoinSpecification_884_9_25()) return true;
    return false;
  }

  private boolean jj_3R_TableRef_871_9_267()
 {
    if (jj_3R_SimpleTableRef_837_9_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CircleWithCoordsAndNoCoordSys_1629_9_42()
 {
    if (jj_scan_token(CIRCLE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_SubQueryExpression_574_9_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_Identifier_751_9_22()) return true;
    return false;
  }

  private boolean jj_3R_SimpleTableRef_839_25_122()
 {
    if (jj_3R_TableName_769_9_140()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SimpleTableRef_839_50_276()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CircleWithCoordsAndCoordSys_1612_9_202()
 {
    if (jj_scan_token(CIRCLE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_CircleWithPoint_1596_19_77()
 {
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_SimpleTableRef_837_9_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SimpleTableRef_839_25_122()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_SimpleTableRef_859_25_123()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_CircleWithPoint_1595_9_41()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_CircleWithCoordsAndNoCoordSys_1629_9_42()) return true;
    return false;
  }

  private boolean jj_3R_CircleWithPoint_1595_9_41()
 {
    if (jj_scan_token(CIRCLE)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CircleWithPoint_1596_19_77()) jj_scanpos = xsp;
    if (jj_3R_PointValue_1438_9_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Circle_1583_17_132()
 {
    if (jj_3R_CircleWithPoint_1595_9_41()) return true;
    return false;
  }

  private boolean jj_3R_Circle_1586_13_133()
 {
    if (jj_3R_CircleWithCoordsAndNoCoordSys_1629_9_42()) return true;
    return false;
  }

  private boolean jj_3R_Circle_1589_9_134()
 {
    if (jj_3R_CircleWithCoordsAndCoordSys_1612_9_202()) return true;
    return false;
  }

  private boolean jj_3R_Circle_1582_9_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Circle_1583_17_132()) {
    jj_scanpos = xsp;
    if (jj_3R_Circle_1586_13_133()) {
    jj_scanpos = xsp;
    if (jj_3R_Circle_1589_9_134()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_OrderItem_811_10_257()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_OrderItem_806_9_254()
 {
    if (jj_3R_ValueExpression_1032_9_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrderItem_811_10_257()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ColumnName_783_28_95()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_TableName_769_9_140()) return true;
    return false;
  }

  private boolean jj_3R_BoxWithCoordsAndNoCoordSys_1565_9_40()
 {
    if (jj_scan_token(BOX)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Column_795_9_30()
 {
    if (jj_3R_ColumnName_783_9_59()) return true;
    return false;
  }

  private boolean jj_3R_ColumnName_783_9_59()
 {
    if (jj_3R_Identifier_751_9_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ColumnName_783_28_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TableName_772_18_206()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_751_9_22()) return true;
    return false;
  }

  private boolean jj_3R_TableName_771_18_205()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_751_9_22()) return true;
    return false;
  }

  private boolean jj_3R_BoxWithCoordsAndCoordSys_1547_9_201()
 {
    if (jj_scan_token(BOX)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Coordinates_1380_9_76()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_BoxWithPoint_1530_19_74()
 {
    if (jj_3R_CoordinateSystem_1473_9_116()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_TableName_769_9_140()
 {
    if (jj_3R_Identifier_751_9_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TableName_771_18_205()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_TableName_772_18_206()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_BoxWithPoint_1529_9_39()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_BoxWithCoordsAndNoCoordSys_1565_9_40()) return true;
    return false;
  }

  private boolean jj_3R_Identifier_758_17_47()
 {
    if (jj_scan_token(DELIMITED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_BoxWithPoint_1529_9_39()
 {
    if (jj_scan_token(BOX)) return true;
    if (jj_scan_token(LEFT_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BoxWithPoint_1530_19_74()) jj_scanpos = xsp;
    if (jj_3R_PointValue_1438_9_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NumericExpression_1063_9_75()) return true;
    if (jj_scan_token(RIGHT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_Identifier_752_17_46()
 {
    if (jj_scan_token(REGULAR_IDENTIFIER_CANDIDATE)) return true;
    return false;
  }

  private boolean jj_3R_Box_1517_17_129()
 {
    if (jj_3R_BoxWithPoint_1529_9_39()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ADQLGrammar201TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[125];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x81,0x0,0x0,0xa00,0xa00,0x800000,0x400,0x800000,0x400008,0x0,0x0,0x0,0x40,0x800000,0x1000000,0x40,0x0,0x0,0x4000000,0x4000000,0x4000,0x3008,0x40,0x40,0x40,0x0,0x20,0x20,0x20,0x0,0x0,0x4000000,0x4000000,0x4000000,0x0,0x8,0xd8000000,0xc0000000,0x20000000,0xd0000000,0xd0000000,0xc0000000,0x20000000,0xd0000000,0xd0000000,0x40,0x0,0xd8000000,0x0,0x0,0x0,0x3000,0x3000,0x8,0x8,0x0,0x3000,0x3000,0xc000,0xc000,0x3000,0x3000,0x8,0x100,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x3008,0x0,0x0,0x0,0x3f0000,0x0,0x0,0x3008,0x3f0000,0x0,0x0,0x40,0x8,0x800000,0x7008,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x40,0x0,0x3008,0x40,0x40,0x0,0x0,0x0,0x8,0x0,0x40,0x8,0x0,0x40,0x40,0x3008,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x8000,0x0,0x80000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x20000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff800200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x300000,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x0,0xc,0x3,0x0,0x0,0x0,0x0,0x0,0xf800200,0xf800200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf800200,0x0,0x0,0xf800200,0xf0000000,0x0,0x80,0x60,0x60,0x80,0xff804200,0x80,0x80,0x80,0x0,0x2080,0x4000,0xff800200,0x0,0x80,0x80,0x0,0x0,0x0,0xff800200,0x7800000,0x0,0xf800000,0x0,0x80000000,0x80000000,0x0,0x0,0xa0000000,0x0,0x200,0xf0000000,0x10000000,0x200,0x40000000,0x200,0x80000000,0x0,0x200,0x0,0x0,0x0,0x0,0xf800200,0x0,0x0,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0xc0000000,0x0,0x0,0xff800200,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffff3ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3280,0x0,0x203,0x0,0x0,0x0,0x0,0x0,0xfffff3ff,0x0,0x0,0x0,0x0,0x0,0x0,0xfffff3ff,0x0,0x0,0x0,0x0,0x0,0x0,0xfffff3ff,0x0,0x0,0x0,0xc,0x0,0x0,0x17c,0x100,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0xffffc37c,0xffffc37c,0x0,0x0,0x1fffc000,0xe0000000,0x801,0x0,0x0,0x0,0x0,0xc01,0x0,0x0,0xfffff3ff,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x0,0x60000,0x0,0x63c7f,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x3800,0x3000,0x0,0x0,0x63800,0x63c00,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x63800,0x0,0x0,0x63c00,0x0,0x60000,0x0,0x0,0x0,0x0,0x63c7f,0x0,0x0,0x0,0x0,0x0,0x0,0x63c7f,0x0,0x0,0x0,0x0,0x0,0x0,0x63c7f,0x0,0x0,0x0,0x0,0x60000,0x60000,0x0,0x0,0x0,0x60000,0x400,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x4003f,0x6383f,0x0,0x0,0x0,0x1f,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x63c7f,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[32];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public ADQLGrammar201(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ADQLGrammar201(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ADQLGrammar201TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 125; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 125; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ADQLGrammar201(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ADQLGrammar201TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 125; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ADQLGrammar201TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 125; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ADQLGrammar201(ADQLGrammar201TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 125; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ADQLGrammar201TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 125; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[116];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 125; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 116; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 32; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
