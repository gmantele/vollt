/* Generated By:JavaCC: Do not edit this line. ADQLGrammar201Constants.java */
package adql.parser.grammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ADQLGrammar201Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SQL_RESERVED_WORD = 2;
  /** RegularExpression Id. */
  int LEFT_PAR = 3;
  /** RegularExpression Id. */
  int RIGHT_PAR = 4;
  /** RegularExpression Id. */
  int DOT = 5;
  /** RegularExpression Id. */
  int COMMA = 6;
  /** RegularExpression Id. */
  int EOQ = 7;
  /** RegularExpression Id. */
  int CONCAT = 8;
  /** RegularExpression Id. */
  int UNION = 9;
  /** RegularExpression Id. */
  int INTERSECT = 10;
  /** RegularExpression Id. */
  int EXCEPT = 11;
  /** RegularExpression Id. */
  int PLUS = 12;
  /** RegularExpression Id. */
  int MINUS = 13;
  /** RegularExpression Id. */
  int ASTERISK = 14;
  /** RegularExpression Id. */
  int DIVIDE = 15;
  /** RegularExpression Id. */
  int EQUAL = 16;
  /** RegularExpression Id. */
  int NOT_EQUAL = 17;
  /** RegularExpression Id. */
  int LESS_THAN = 18;
  /** RegularExpression Id. */
  int LESS_EQUAL_THAN = 19;
  /** RegularExpression Id. */
  int GREATER_THAN = 20;
  /** RegularExpression Id. */
  int GREATER_EQUAL_THAN = 21;
  /** RegularExpression Id. */
  int SELECT = 22;
  /** RegularExpression Id. */
  int QUANTIFIER = 23;
  /** RegularExpression Id. */
  int TOP = 24;
  /** RegularExpression Id. */
  int FROM = 25;
  /** RegularExpression Id. */
  int AS = 26;
  /** RegularExpression Id. */
  int NATURAL = 27;
  /** RegularExpression Id. */
  int INNER = 28;
  /** RegularExpression Id. */
  int OUTER = 29;
  /** RegularExpression Id. */
  int RIGHT = 30;
  /** RegularExpression Id. */
  int LEFT = 31;
  /** RegularExpression Id. */
  int FULL = 32;
  /** RegularExpression Id. */
  int JOIN = 33;
  /** RegularExpression Id. */
  int ON = 34;
  /** RegularExpression Id. */
  int USING = 35;
  /** RegularExpression Id. */
  int WHERE = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int IS = 40;
  /** RegularExpression Id. */
  int NULL = 41;
  /** RegularExpression Id. */
  int BETWEEN = 42;
  /** RegularExpression Id. */
  int LIKE = 43;
  /** RegularExpression Id. */
  int ILIKE = 44;
  /** RegularExpression Id. */
  int IN = 45;
  /** RegularExpression Id. */
  int EXISTS = 46;
  /** RegularExpression Id. */
  int WITH = 47;
  /** RegularExpression Id. */
  int BY = 48;
  /** RegularExpression Id. */
  int GROUP = 49;
  /** RegularExpression Id. */
  int HAVING = 50;
  /** RegularExpression Id. */
  int ORDER = 51;
  /** RegularExpression Id. */
  int ASC = 52;
  /** RegularExpression Id. */
  int DESC = 53;
  /** RegularExpression Id. */
  int OFFSET = 54;
  /** RegularExpression Id. */
  int AVG = 55;
  /** RegularExpression Id. */
  int MAX = 56;
  /** RegularExpression Id. */
  int MIN = 57;
  /** RegularExpression Id. */
  int SUM = 58;
  /** RegularExpression Id. */
  int COUNT = 59;
  /** RegularExpression Id. */
  int BOX = 60;
  /** RegularExpression Id. */
  int CENTROID = 61;
  /** RegularExpression Id. */
  int CIRCLE = 62;
  /** RegularExpression Id. */
  int POINT = 63;
  /** RegularExpression Id. */
  int POLYGON = 64;
  /** RegularExpression Id. */
  int REGION = 65;
  /** RegularExpression Id. */
  int CONTAINS = 66;
  /** RegularExpression Id. */
  int INTERSECTS = 67;
  /** RegularExpression Id. */
  int AREA = 68;
  /** RegularExpression Id. */
  int COORD1 = 69;
  /** RegularExpression Id. */
  int COORD2 = 70;
  /** RegularExpression Id. */
  int COORDSYS = 71;
  /** RegularExpression Id. */
  int DISTANCE = 72;
  /** RegularExpression Id. */
  int CAST = 73;
  /** RegularExpression Id. */
  int VARIABLE_LENGTH_DATATYPE = 74;
  /** RegularExpression Id. */
  int NO_LENGTH_DATATYPE = 75;
  /** RegularExpression Id. */
  int LOWER = 76;
  /** RegularExpression Id. */
  int UPPER = 77;
  /** RegularExpression Id. */
  int ABS = 78;
  /** RegularExpression Id. */
  int CEILING = 79;
  /** RegularExpression Id. */
  int DEGREES = 80;
  /** RegularExpression Id. */
  int EXP = 81;
  /** RegularExpression Id. */
  int FLOOR = 82;
  /** RegularExpression Id. */
  int LOG = 83;
  /** RegularExpression Id. */
  int LOG10 = 84;
  /** RegularExpression Id. */
  int MOD = 85;
  /** RegularExpression Id. */
  int PI = 86;
  /** RegularExpression Id. */
  int POWER = 87;
  /** RegularExpression Id. */
  int RADIANS = 88;
  /** RegularExpression Id. */
  int RAND = 89;
  /** RegularExpression Id. */
  int ROUND = 90;
  /** RegularExpression Id. */
  int SQRT = 91;
  /** RegularExpression Id. */
  int TRUNCATE = 92;
  /** RegularExpression Id. */
  int ACOS = 93;
  /** RegularExpression Id. */
  int ASIN = 94;
  /** RegularExpression Id. */
  int ATAN = 95;
  /** RegularExpression Id. */
  int ATAN2 = 96;
  /** RegularExpression Id. */
  int COS = 97;
  /** RegularExpression Id. */
  int COT = 98;
  /** RegularExpression Id. */
  int SIN = 99;
  /** RegularExpression Id. */
  int TAN = 100;
  /** RegularExpression Id. */
  int IN_UNIT = 101;
  /** RegularExpression Id. */
  int COALESCE = 102;
  /** RegularExpression Id. */
  int STRING_LITERAL = 106;
  /** RegularExpression Id. */
  int SCIENTIFIC_NUMBER = 107;
  /** RegularExpression Id. */
  int UNSIGNED_FLOAT = 108;
  /** RegularExpression Id. */
  int UNSIGNED_INTEGER = 109;
  /** RegularExpression Id. */
  int DIGIT = 110;
  /** RegularExpression Id. */
  int DELIMITED_IDENTIFIER = 113;
  /** RegularExpression Id. */
  int REGULAR_IDENTIFIER_CANDIDATE = 114;
  /** RegularExpression Id. */
  int Letter = 115;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinString = 1;
  /** Lexical state. */
  int WithinDelimitedId = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<SQL_RESERVED_WORD>",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "\"||\"",
    "\"UNION\"",
    "\"INTERSECT\"",
    "\"EXCEPT\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "<NOT_EQUAL>",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"SELECT\"",
    "<QUANTIFIER>",
    "\"TOP\"",
    "\"FROM\"",
    "\"AS\"",
    "\"NATURAL\"",
    "\"INNER\"",
    "\"OUTER\"",
    "\"RIGHT\"",
    "\"LEFT\"",
    "\"FULL\"",
    "\"JOIN\"",
    "\"ON\"",
    "\"USING\"",
    "\"WHERE\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\"IS\"",
    "\"NULL\"",
    "\"BETWEEN\"",
    "\"LIKE\"",
    "\"ILIKE\"",
    "\"IN\"",
    "\"EXISTS\"",
    "\"WITH\"",
    "\"BY\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"ORDER\"",
    "\"ASC\"",
    "\"DESC\"",
    "\"OFFSET\"",
    "\"AVG\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"SUM\"",
    "\"COUNT\"",
    "\"BOX\"",
    "\"CENTROID\"",
    "\"CIRCLE\"",
    "\"POINT\"",
    "\"POLYGON\"",
    "\"REGION\"",
    "\"CONTAINS\"",
    "\"INTERSECTS\"",
    "\"AREA\"",
    "\"COORD1\"",
    "\"COORD2\"",
    "\"COORDSYS\"",
    "\"DISTANCE\"",
    "\"CAST\"",
    "<VARIABLE_LENGTH_DATATYPE>",
    "<NO_LENGTH_DATATYPE>",
    "\"LOWER\"",
    "\"UPPER\"",
    "\"ABS\"",
    "\"CEILING\"",
    "\"DEGREES\"",
    "\"EXP\"",
    "\"FLOOR\"",
    "\"LOG\"",
    "\"LOG10\"",
    "\"MOD\"",
    "\"PI\"",
    "\"POWER\"",
    "\"RADIANS\"",
    "\"RAND\"",
    "\"ROUND\"",
    "\"SQRT\"",
    "\"TRUNCATE\"",
    "\"ACOS\"",
    "\"ASIN\"",
    "\"ATAN\"",
    "\"ATAN2\"",
    "\"COS\"",
    "\"COT\"",
    "\"SIN\"",
    "\"TAN\"",
    "\"IN_UNIT\"",
    "\"COALESCE\"",
    "<token of kind 103>",
    "\"\\\'\"",
    "<token of kind 105>",
    "\"\\\'\"",
    "<SCIENTIFIC_NUMBER>",
    "<UNSIGNED_FLOAT>",
    "<UNSIGNED_INTEGER>",
    "<DIGIT>",
    "\"\\\"\"",
    "<token of kind 112>",
    "\"\\\"\"",
    "<REGULAR_IDENTIFIER_CANDIDATE>",
    "<Letter>",
  };

}
