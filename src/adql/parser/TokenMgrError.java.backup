/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 6.0 */
/* JavaCCOptions:
 *
 * Modified by Gr&eacute;gory Mantelet (CDS), on Sept. 2017
 * Modifications:
 *     - addition of position (line and column) in the original text
 *     - adapt the error message so that being more explicit for humans
 *       and display the incorrect character as a character instead of an
 *       integer value
 * 
 * /!\ DO NOT RE-GENERATE THIS FILE /!\
 * In case of re-generation, replace it by TokenMgrError.java.backup (but maybe
 * after a diff in case of significant modifications have been done by a new
 * version of JavaCC).
 */
package adql.parser;

/** Token Manager Error. */
public class TokenMgrError extends Error {

	/**
	 * The version identifier for this Serializable class.
	 * Increment only if the <i>serialized</i> form of the
	 * class changes.
	 */
	private static final long serialVersionUID = 1L;

	/*
	 * Ordinals for various reasons why an Error of this type can be thrown.
	 */

	/**
	 * Lexical error occurred.
	 */
	static final int LEXICAL_ERROR = 0;

	/**
	 * An attempt was made to create a second instance of a static token manager.
	 */
	static final int STATIC_LEXER_ERROR = 1;

	/**
	 * Tried to change to an invalid lexical state.
	 */
	static final int INVALID_LEXICAL_STATE = 2;

	/**
	 * Detected (and bailed out of) an infinite loop in the token manager.
	 */
	static final int LOOP_DETECTED = 3;

	/**
	 * Indicates the reason why the exception is thrown. It will have
	 * one of the above 4 values.
	 */
	int errorCode;

	/** Indicates the line at which the error occurs. */
	int errorLine = -1;

	/** Indicates the column at which the error occurs. */
	int errorColumn = -1;

	/**
	 * Replaces unprintable characters by their escaped (or unicode escaped)
	 * equivalents in the given string
	 */
	protected static final String addEscapes(String str){
		StringBuffer retval = new StringBuffer();
		char ch;
		for(int i = 0; i < str.length(); i++){
			switch(str.charAt(i)){
				case 0:
					continue;
				case '\b':
					retval.append("\\b");
					continue;
				case '\t':
					retval.append("\\t");
					continue;
				case '\n':
					retval.append("\\n");
					continue;
				case '\f':
					retval.append("\\f");
					continue;
				case '\r':
					retval.append("\\r");
					continue;
				case '\"':
					retval.append("\\\"");
					continue;
				case '\'':
					retval.append("\\\'");
					continue;
				case '\\':
					retval.append("\\\\");
					continue;
				default:
					if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e){
						String s = "0000" + Integer.toString(ch, 16);
						retval.append("\\u" + s.substring(s.length() - 4, s.length()));
					}else{
						retval.append(ch);
					}
					continue;
			}
		}
		return retval.toString();
	}

	/**
	 * Returns a detailed message for the Error when it is thrown by the
	 * token manager to indicate a lexical error.
	 * Parameters :
	 *    EOFSeen     : indicates if EOF caused the lexical error
	 *    curLexState : lexical state in which this error occurred
	 *    errorLine   : line number when the error occurred
	 *    errorColumn : column number when the error occurred
	 *    errorAfter  : prefix that was seen before this error occurred
	 *    curchar     : the offending character
	 * Note: You can customize the lexical error message by modifying this method.
	 */
	protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar){
		return ("Incorrect character encountered at l." + errorLine + ", c." + errorColumn + ": " + (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " ('" + curChar + "'), ") + "after : \"" + addEscapes(errorAfter) + "\"");
	}

	/**
	 * You can also modify the body of this method to customize your error messages.
	 * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
	 * of end-users concern, so you can return something like :
	 *
	 *     "Internal Error : Please file a bug report .... "
	 *
	 * from this method for such cases in the release version of your parser.
	 */
	@Override
	public String getMessage(){
		return super.getMessage();
	}

	/**
	 * Gets the line at which this error occurs.
	 * 
	 * @return	Error line or <code>-1</code> if unknown.
	 */
	public final int getErrorLine(){
		return errorLine;
	}

	/**
	 * Gets the column at which this error occurs.
	 * 
	 * @return	Error column or <code>-1</code> if unknown.
	 */
	public final int getErrorColumn(){
		return errorColumn;
	}

	/*
	 * Constructors of various flavors follow.
	 */

	/** No arg constructor. */
	public TokenMgrError(){}

	/** Constructor with message and reason. */
	public TokenMgrError(String message, int reason){
		super(message);
		errorCode = reason;
	}

	/** Full Constructor. */
	public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason){
		this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
		this.errorLine = errorLine;
		this.errorColumn = errorColumn;
	}
}
/* JavaCC - OriginalChecksum=f63fc7c10226c13ff5a304e2fb1ae182 (do not edit this line) */
